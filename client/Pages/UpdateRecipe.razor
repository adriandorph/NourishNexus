@page "/recipes/edit/{Id}"
@attribute [Authorize]
@using System.Threading.Tasks
@using server.Core.EF.DTO
@using System.Text.Json
@using Microsoft.JSInterop
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IRecipeService RecipeService
@inject ICategoryService CategoryService
@inject IFoodItemService FoodItemService

<PageTitle> Edit Recipe </PageTitle>

<div id="everything">

    <EditForm Model="@recipe" OnSubmit="HandleUpdateRecipe">

        <h1 class="mb-4">Edit Recipe</h1>

        <div class="card my-4">
            <div class="card-body">
                <div class="form-group">
                    <label for="title">
                        <h3>Title</h3>
                    </label>
                    <InputText class="form-control" id="title" @bind-Value="@recipe.Title" />
                </div>
            </div>
        </div>

        <div class="card my-4">
            <div class="card-body">
                <div class="form-group my-2">
                    <h3>Categories</h3>
                    <div class="category-checkboxes d-flex flex-wrap">
                        @if (AllCategories != null && AllCategories.Any())
                        {
                            var sortedCategories = AllCategories.OrderBy(c => c.Name);
                            @foreach (var category in sortedCategories)
                            {
                                <div class="category-box mr-2 mb-2 rounded">
                                    <label>
                                        <input type="checkbox" value="@category.Id"
                                            checked="@selectedCategoryIds.Contains(category.Id)"
                                    @onchange="@(e => UpdateSelectedCategories(category.Id, e))" />
                                        @category.Name
                                    </label>
                                </div>
                            }
                            <button class="btn btn-success" type="button" @onclick="ShowModal">Add new</button>
                        }
                    </div>
                </div>
            </div>
        </div>


        <div class="card my-4">
            <div class="card-body">
                <span>
                    <h3 class="card-title">Description</h3>
                </span>
                <div class="form-group my-2">
                    <InputTextArea class="form-control" id="description" @bind-Value="@recipe.Description" rows="8" />
                </div>
            </div>
        </div>


        <div class="card my-4">
            <div class="card-body">
                <span class="d-flex justify-content-between">
                    <h3 class="card-title">Ingredients</h3>
                    <h4 class="text-right kcal ">@TotalCalories() kcal </h4>
                </span>
                @foreach (FoodItemAmountDTO ingredient in ingredients)
                {
                    <div class="ingredient-box d-flex justify-content-between rounded mb-2">
                        <span class="ingredient-name">@ingredient.FoodItem!.Name</span>
                        <span>
                            <span class="ingredient-g">@Scale(ingredient.Amount, 100) g</span>
                            <button class="cross" type="button"
                            @onclick="async () => await HandleDeleteIngredient(ingredient)">X</button>
                        </span>
                    </div>
                }
                <button class="btn btn-success" type="button" @onclick="HandleAddIngredient">
                    Add Ingredient
                </button>
            </div>
        </div>




        <div class="card my-4">
            <div class="card-body">
                <span>
                    <h3 class="card-title">Method</h3>
                </span>
                <div class="form-group my-2">
                    <InputTextArea class="form-control" id="method" @bind-Value="@recipe.Method" rows="8" />
                </div>
            </div>
        </div>

        <div class="card my-4">
            <div class="card-body">
                <div class="form-group my-2">
                    <h3>Meal type</h3>
                    <div class="category-checkboxes d-flex flex-wrap">
                        <div class="category-box mr-2 mb-2 rounded">
                            <label>
                                <input type="checkbox" value="@recipe.IsBreakfast" checked="@recipe.IsBreakfast"
                                    @onchange="UpdateIsBreakfast" />
                                Breakfast
                            </label>
                        </div>
                        <div class="category-box mr-2 mb-2 rounded">
                            <label>
                                <input type="checkbox" value="@recipe.IsLunch" checked="@recipe.IsLunch"
                                    @onchange="UpdateIsLunch" />
                                Lunch
                            </label>
                        </div>
                        <div class="category-box mr-2 mb-2 rounded">
                            <label>
                                <input type="checkbox" value="@recipe.IsDinner" checked="@recipe.IsDinner"
                                    @onchange="UpdateIsDinner" />
                                Dinner
                            </label>
                        </div>
                        <div class="category-box mr-2 mb-2 rounded">
                            <label>
                                <input type="checkbox" value="@recipe.IsSnack" checked="@recipe.IsSnack"
                                    @onchange="UpdateIsSnack" />
                                Snack
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card my-4">
            <div class="card-body">
                <div class="form-group my-2">
                    <div>
                        <h3>Recipe visibility</h3>
                    </div>
                    <InputRadioGroup @bind-Value="recipe.IsPublic">
                        <InputRadio id="Public" Value="true" class="form-check-input" Checked="@(recipe.IsPublic)" />
                        <label class="form-check-label" for="Public">Public</label>

                        <InputRadio id="Private" Value="false" class="form-check-input" Checked="@(!recipe.IsPublic)" />
                        <label class="form-check-label" for="Private">Private</label>
                    </InputRadioGroup>
                </div>
            </div>
        </div>
        <div class="form-group">
            <p>Public recipes will be available for other users to save on the "Community Recipes" page.</p>
        </div>
        <div class="form-group my-2">
            <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancel</button>
            <button type="submit" class="btn btn-primary btn-block">Update</button>
            <button type="button" class="btn btn-danger" @onclick="HandleDeleteRecipe">Delete</button>
            <div class="@messageCssClass">
                <span>@message</span>
            </div>
        </div>
    </EditForm>
</div>


@code {
    [Parameter]
    public string Id { get; set; } = "";

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    string message = string.Empty;
    List<int> selectedCategoryIds = new List<int>();
    string messageCssClass = string.Empty;
    private RecipeUpdateDTO recipe = new();

    private List<FoodItemAmountDTO> ingredients { get; set; } = new List<FoodItemAmountDTO>();

    private List<CategoryDTO> AllCategories { get; set; } = new List<CategoryDTO>();

    private async void ShowModal()
    {
        await AddBlurClass();

        var options = new ModalOptions
            {
                UseCustomLayout = true
            };
        var modal = Modal.Show<CategoryModal>("Cat Modal", options);

        var result = await modal.Result;

        await RemoveBlurClass();
        if (!result.Cancelled)
        {
            await HandleCategoryAdded();
            StateHasChanged();
        }
    }

    private async Task AddBlurClass()
    {
        await JSRuntime.InvokeVoidAsync("addElementClass", "everything", "blur");
    }

    private async Task RemoveBlurClass()
    {
        await JSRuntime.InvokeVoidAsync("removeElementClass", "everything", "blur");
    }

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("clearScrollBtn");
        var existingRecipe = await RecipeService.GetRecipe(int.Parse(Id));
        recipe.Id = existingRecipe.Id;
        recipe.CategoryIDs = existingRecipe.CategoryIDs;
        recipe.Title = existingRecipe.Title;
        recipe.Description = existingRecipe.Description;
        recipe.Method = existingRecipe.Method;
        recipe.IsPublic = existingRecipe.IsPublic;
        recipe.IsBreakfast = existingRecipe.IsBreakfast;
        recipe.IsLunch = existingRecipe.IsLunch;
        recipe.IsDinner = existingRecipe.IsDinner;
        recipe.IsSnack = existingRecipe.IsSnack;
        foreach (int catid in existingRecipe.CategoryIDs)
        {
            selectedCategoryIds.Add(catid);
        }
        ingredients = await FoodItemService.GetByRecipe(recipe.Id);

        await LoadChanges();

        var catResponse = await CategoryService.GetCategories();
        if (catResponse.IsSuccessStatusCode)
        {
            AllCategories = await catResponse.Content.ReadFromJsonAsync<List<CategoryDTO>>() ?? new List<CategoryDTO>();
        }
    }

    async Task HandleUpdateRecipe()
    {
        recipe.CategoryIDs = selectedCategoryIds;
        var responseRecipe = await RecipeService.UpdateRecipe(recipe);
        var responseIngredients = await FoodItemService.SetIngredients(ingredients, recipe.Id);

        ClearUsedSessionStorage();
        if (responseRecipe.IsSuccessStatusCode && responseIngredients.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("savedRecipes");
        }
        else
        {
            messageCssClass = "text-danger";
            message = "Error.You already have a recipe with that name";
        }
    }

    async Task HandleDeleteRecipe()
    {
        var response = await RecipeService.DeleteRecipe(recipe.Id);
        ClearUsedSessionStorage();
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("savedRecipes");
        }
        else
        {
            messageCssClass = "text-danger";
            message = "Recipe deletion failed";
        }
    }

    protected async void GoBack()
    {
        ClearUsedSessionStorage();
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    void UpdateSelectedCategories(int categoryId, ChangeEventArgs e)
    {
        if ((bool)e.Value!)
        {
            selectedCategoryIds.Add(categoryId);
        }
        else
        {
            selectedCategoryIds.Remove(categoryId);
        }
    }

    private async Task HandleCategoryAdded()
    {
        var catResponse = await CategoryService.GetCategories();
        if (catResponse.IsSuccessStatusCode)
        {
            AllCategories = await catResponse.Content.ReadFromJsonAsync<List<CategoryDTO>>() ?? new List<CategoryDTO>();
            selectedCategoryIds.Add(AllCategories.Last().Id);
        }

    }

    private string Scale(float a, float b)
    {
        var res = a * b;
        return $"{(res):0.##}";
    }


    private string TotalCalories()
    {
        float sum = 0.0f;
        foreach (var ingredient in ingredients)
        {
            sum += FoodItemCalories(ingredient);
        }
        return $"{(sum):0.##}";
    }

    private float FoodItemCalories(FoodItemAmountDTO item)
    => item.Amount * item.FoodItem!.Calories;

    private async Task SaveChanges()
    {
        recipe.CategoryIDs = selectedCategoryIds;
        string createRecipeSerialized = JsonSerializer.Serialize(recipe);
        string ingredientsSerialized = JsonSerializer.Serialize(ingredients);
        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "NN_UpdateRecipe", createRecipeSerialized);
        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "NN_Ingredients", ingredientsSerialized);
    }

    private async Task LoadChanges()
    {
        string? createRecipeSerialized = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "NN_UpdateRecipe");
        string? ingredientsSerialized = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "NN_Ingredients");

        if (!string.IsNullOrEmpty(createRecipeSerialized))
        {
            var loadedRecipe = JsonSerializer.Deserialize<RecipeUpdateDTO>(createRecipeSerialized);
            if (loadedRecipe != null)
            {
                recipe = loadedRecipe;
                selectedCategoryIds = recipe.CategoryIDs ?? new List<int>();
            }
            if (!string.IsNullOrEmpty(ingredientsSerialized))
            {
                var loadedIngredients = JsonSerializer.Deserialize<List<FoodItemAmountDTO>>(ingredientsSerialized);
                if (loadedIngredients != null) ingredients = loadedIngredients;
            }
        }
    }

    private async void ClearUsedSessionStorage()
    {
        await JSRuntime.InvokeAsync<string>("sessionStorage.removeItem", "NN_UpdateRecipe");
        await JSRuntime.InvokeAsync<string>("sessionStorage.removeItem", "NN_Ingredients");
    }

    private async Task HandleDeleteIngredient(FoodItemAmountDTO ingredient)
    {
        ingredients.Remove(ingredient);
        await SaveChanges();
        StateHasChanged();
    }

    private async Task HandleAddIngredient()
    {
        await SaveChanges();
        NavigationManager.NavigateTo("/search/fooditems");
    }


    private void UpdateIsBreakfast(ChangeEventArgs e)
    {
        recipe.IsBreakfast = (bool)e.Value!;
    }
    private void UpdateIsLunch(ChangeEventArgs e)
    {
        recipe.IsLunch = (bool)e.Value!;
        Console.WriteLine($"IsLunch: {recipe.IsLunch}");
    }
    private void UpdateIsDinner(ChangeEventArgs e)
    {
        recipe.IsDinner = (bool)e.Value!;
        Console.WriteLine($"IsDinner: {recipe.IsDinner}");
    }
    private void UpdateIsSnack(ChangeEventArgs e)
    {
        recipe.IsSnack = (bool)e.Value!;
        Console.WriteLine($"IsSnack: {recipe.IsSnack}");
    }


}

