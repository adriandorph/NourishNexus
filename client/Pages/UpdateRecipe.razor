@page "/recipes/edit/{Id}"
@attribute [Authorize]
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using server.Core.EF.DTO;
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject RecipeService RecipeService
@inject CategoryService CategoryService

<PageTitle> Edit Recipe </PageTitle>

<h1>Edit Recipe</h1>

<div class="form-group my-2">
        <h6>Choose Categories</h6>
        <div class="category-checkboxes d-flex flex-wrap">
            @if (AllCategories != null && AllCategories.Any())
            {
                var sortedCategories = AllCategories.OrderBy(c => c.Name);
                @foreach (var category in sortedCategories)
                {
                    <div class="category-box mr-2 mb-2 rounded">
                        <label>
                            <input type="checkbox" value="@category.Id" checked="@selectedCategoryIds.Contains(category.Id)"
                        @onchange="@(e => UpdateSelectedCategories(category.Id, e))" />
                            @category.Name
                        </label>
                    </div>
                }
                <button class="btn btn-success" type="button" @onclick="ShowModal">Add new</button>
            }
        </div>
    </div>

    <style>
        .category-box {
            background-color: #eee;
            padding: 4px 8px;
            margin: 4px 8px;
        }

        .category-box label {
            margin-bottom: 0;
        }

        .category-box input[type=checkbox] {
            margin-right: 4px;
        }
    </style>
        <EditForm Model="@recipe" OnSubmit="HandleUpdateRecipe">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="title">Title</label>
                <InputText class="form-control" id="title" @bind-Value="@recipe.Title" />
            </div>

            <div class="form-group">
                <label for="method">Method</label>
                <InputTextArea class="form-control" id="method" @bind-Value="@recipe.Method" rows="7" />

            </div>

            <div class="form-group">
                <label for="description">Description</label>
                <InputTextArea class="form-control" id="description" @bind-Value="@recipe.Description" rows="7" />
            </div>
            <div class="form-group">
                <div>Recipe visibility</div>
                <InputRadioGroup @bind-Value="recipe.IsPublic">
                    <InputRadio id="Public" Value="true" class="form-check-input" /><label class="form-check-label" for="Public">Public</label>
                    <InputRadio id="Private" Value="false" class="form-check-input" /><label class="form-check-label" for="Private">Private</label>
                </InputRadioGroup>
            </div>
            <div class="form-group">
                <p>If you choose to create a private recipe, it will not be visible to other users</p>
            </div>
            <div class="form-group">
                <br/>
                <button type="button" class="btn btn-primary" @onclick="GoBack">Cancel</button>
                <button type="submit" class="btn btn-success btn-block">Update</button>
                <button type="submit" class="btn btn-danger btn-block" @onclick="HandleDeleteRecipe">Delete</button>
                 <div class ="@messageCssClass">
                <span>@message</span>
            </div>
            </div>
        </EditForm>
 



@code {
    [Parameter]
    public string Id {get; set;} = "";

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    string message = string.Empty;
    List<int> selectedCategoryIds = new List<int>();
    string messageCssClass = string.Empty;
    private RecipeUpdateDTO recipe = new();

    private RecipeDTO? existingRecipe;
    private List<CategoryDTO> AllCategories { get; set; } = new List<CategoryDTO>();

    private async void ShowModal()
    {
        var options = new ModalOptions
            {
                UseCustomLayout = true
            };
        var modal = Modal.Show<CategoryModal>("Cat Modal", options);

        var result = await modal.Result;


        if (!result.Cancelled)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    protected override async Task OnInitializedAsync(){
        var existingRecipe = await RecipeService.GetRecipe(int.Parse(Id));
        recipe.Id = existingRecipe.Id;
        recipe.CategoryIDs = existingRecipe.CategoryIDs;
        recipe.Title = existingRecipe.Title;
        recipe.Description = existingRecipe.Description;
        recipe.Method = existingRecipe.Method;
        recipe.IsPublic = existingRecipe.IsPublic;
        foreach(int catid in existingRecipe.CategoryIDs){
            selectedCategoryIds.Add(catid);
        }

        var catResponse = await CategoryService.GetCategories();
        if (catResponse.IsSuccessStatusCode)
        {
            AllCategories = await catResponse.Content.ReadFromJsonAsync<List<CategoryDTO>>() ?? new List<CategoryDTO>();
        }
        else
        {
            Console.WriteLine("The response was not successful");
        }
        
    }

    async Task HandleUpdateRecipe()
    {
        recipe.CategoryIDs = selectedCategoryIds;
        var response = await RecipeService.UpdateRecipe(recipe);
        
        if(response.IsSuccessStatusCode)
        {
            messageCssClass = "text-success";
            message = "Recipe updated successfully";
            NavigationManager.NavigateTo("savedRecipes");
        } 
        else 
        {
            messageCssClass = "text-danger";
            message = "Recipe update failed";
        }
    }

    async Task HandleDeleteRecipe()
{
    var response = await RecipeService.DeleteRecipe(recipe.Id);
    
    if (response.IsSuccessStatusCode)
    {
        messageCssClass = "text-success";
        message = "Recipe deleted successfully";
        NavigationManager.NavigateTo("savedRecipes");
    }
    else
    {
        messageCssClass = "text-danger";
        message = "Recipe deletion failed";
    }
}

    protected async void GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    void UpdateSelectedCategories(int categoryId, ChangeEventArgs e)
    {
        if ((bool)e.Value!)
        {
            selectedCategoryIds.Add(categoryId);
        }
        else
        {
            selectedCategoryIds.Remove(categoryId);
        }
    }
}

