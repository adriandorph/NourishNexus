@page "/search/{searchScope}"
@attribute [Authorize]
@using System.Security.Claims
@inject HttpClient Http
@inject FoodItemService FoodItemService
@inject RecipeService RecipeService
@inject UserService UserService
@inject AuthenticationStateProvider CustomAuthStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h1>Search for Food</h1>

<div>
  <button type="button" class="btn btn-primary mb-2" @onclick="GoBack">
    <i class="oi oi-arrow-thick-left mr-2"></i>
  </button>
  
@if(searchScope == "all")
{

<div class="btn-group mx-3 mb-2">
    <button class="btn btn-secondary @((IsSearchOptionActive(SearchOption.FoodItems) ? "active" : ""))" @onclick="() => SetSearchOption(SearchOption.FoodItems)">
        Food Items
    </button>
    <button class="btn btn-secondary @((IsSearchOptionActive(SearchOption.SavedRecipes) ? "active" : ""))" @onclick="() => SetSearchOption(SearchOption.SavedRecipes)">
        Saved Recipes
    </button>
    <button class="btn btn-secondary @((IsSearchOptionActive(SearchOption.CommunityRecipes) ? "active" : ""))" @onclick="() => SetSearchOption(SearchOption.CommunityRecipes)">
        Community Recipes
    </button>
</div>
}
</div>

<div class="form-group mt-3">
    <input type="text" class="form-control rounded-edge" placeholder="Search..." id="search-query" @oninput="PerformSearch" />
</div>

<hr class="hr">

@if (SearchResults != null)
{
    <ul class="list-group">
        @foreach (var result in SearchResults)
        {
            
            <a href="@(IsSearchOptionActive(SearchOption.FoodItems) ? $"/addfooditem/{result.Id}" : $"/viewRecipe/{result.Id}/add/1")" class="searchresult rounded-edge">
                <li class="list-group-item searchitem">
                    <h4>@result.Title</h4>
                    @if(result.Type != SearchResultType.FoodItem)
                    {
                        <p class="byline">
                            By <i>@result.Author</i>
                        </p>
                    }
                </li>
            </a>
        }
    </ul>
}
@if (SearchPerformed && !SearchResults!.Any())
{
    <p>No results found.</p>
}

<br>

@code {
    [Parameter]
    public string searchScope {get; set;} = "all";
    private int userID;
    private bool SearchPerformed {get; set;} = false;
    private List<SearchResult> SearchResults {get; set;} = new List<SearchResult>();

    private record SearchResult(int Id, string Title, SearchResultType Type, string? Author);

    private enum SearchResultType
    {
        FoodItem,
        Recipe
    }

    private enum SearchOption
    {
        FoodItems,
        SavedRecipes,
        CommunityRecipes
    }
    private SearchOption CurrentSearchOption {get; set;}



    protected override async Task OnInitializedAsync()
    {
        var user = (await CustomAuthStateProvider.GetAuthenticationStateAsync()).User;
        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        int.TryParse(userIdClaim!.Value, out int id);
        userID = id;
    }

    

    private async Task PerformSearch(ChangeEventArgs e)
    {
        string searchQuery = e.Value != null ? e.Value!.ToString() ?? " " : " ";
        if (searchQuery.Length < 1 || searchQuery.StartsWith(" ")) 
        {
            SearchPerformed = false;
            return;
        }
        switch (CurrentSearchOption)
        {
            case SearchOption.FoodItems:
                var foodItemList = await FoodItemService.GetBySearchWord(searchQuery);
                var foodItemResults = foodItemList.Select(f => new SearchResult(f.Id, f.Name, SearchResultType.FoodItem, null)).ToList();
                SearchResults = foodItemResults;
                break;
            case SearchOption.SavedRecipes:
                var recipeList = await RecipeService.GetSavedBySearchWord(searchQuery, userID);
                var recipeResults = recipeList.Select(async r => new SearchResult(r.Id, r.Title, SearchResultType.Recipe, await GetRecipeAuthor(r.AuthorId))).ToList();
                SearchResults = (await Task.WhenAll(recipeResults)).ToList();
                break;
            case SearchOption.CommunityRecipes:
                var communityList = await RecipeService.GetFromCommunityBySearchWord(searchQuery);
                var communityResults = communityList.Select(async r => new SearchResult(r.Id, r.Title, SearchResultType.Recipe, await GetRecipeAuthor(r.AuthorId))).ToList();
                SearchResults = (await Task.WhenAll(communityResults)).ToList();
                break;
            default:
                throw new Exception();
        }
        SearchPerformed = true;
    }


    private void SetSearchOption(SearchOption searchOption)
    {
        CurrentSearchOption = searchOption;
        SearchPerformed = false;
        // Perform additional logic based on the selected search option
        SearchResults = new List<SearchResult>();
    }

    // Check if the given search option is currently active
    private bool IsSearchOptionActive(SearchOption searchOption)
    {
        return CurrentSearchOption == searchOption;
    }

    public async Task<string> GetRecipeAuthor(int userid)
    {
        var user = await UserService.GetUserByID(userid);
        return user.Nickname;
    }

    protected async void GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
    
}