@page "/recipes/create"
@attribute [Authorize]
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using server.Core.EF.DTO;
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider CustomAuthStateProvider
@inject RecipeService RecipeService
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime

<PageTitle> Create Recipe </PageTitle>

<h1>Create Recipe</h1>
        <div class="form-group">
            <label for="title">Title</label>
            <InputText class="form-control" id="title" @bind-Value="@recipe.Title" />
        </div>

<EditForm Model="@recipe" OnSubmit="HandleCreateRecipe">
    <div class="form-group my-2">
        <h6>Categories</h6>
        <div class="category-checkboxes d-flex flex-wrap">
            @if (AllCategories != null && AllCategories.Any())
            {
                var sortedCategories = AllCategories.OrderBy(c => c.Name);
                @foreach (var category in sortedCategories)
                {
                    <div class="category-box mr-2 mb-2 rounded">
                        <label>
                            <input type="checkbox" value="@category.Id" checked="@selectedCategoryIds.Contains(category.Id)"
                        @onchange="@(e => UpdateSelectedCategories(category.Id, e))" />
                            @category.Name
                        </label>
                    </div>
                }
                <button class="btn btn-success" type="button" @onclick="ShowModal">Add new</button>
            }
        </div>
    </div>

    <style>
        .category-box {
            background-color: #eee;
            padding: 4px 8px;
            margin: 4px 8px;
        }

        .category-box label {
            margin-bottom: 0;
        }

        .category-box input[type=checkbox] {
            margin-right: 4px;
        }
    </style>
    

    <div class="card my-4">
        <div class="card-body">
            <span>
                <h2 class="card-title">Description</h2>
            </span>
            <div class="form-group my-2">
                <InputTextArea class="form-control" id="description" @bind-Value="@recipe.Description" rows="4" />
            </div>
        </div>
    </div>


    <div class="card my-4">
        <div class="card-body">
            <span class="d-flex justify-content-between">
                <h2 class="card-title">Ingredients</h2>
                <h4 class="text-right kcal ">kcal </h4>
            </span>
            @foreach (FoodItemAmountDTO ingredient in ingredients)
            {
                <div class="ingredient-box d-flex justify-content-between rounded mb-2">
                    <span class="ingredient-name">@ingredient.FoodItem!.Name</span>
                    <span class="ingredient-g"> g</span>
                    <button class="cross" type="button">X</button>
                </div>
            }
            <button class="btn btn-success" type="button">
                Add Ingredient
            </button>
        </div>
    </div>

    <style>
        .ingredient-box {
            background-color: #eee;
            padding: 8px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .ingredient-name {
            margin-right: 8px;
        }

        .ingredient-g {
            color: #000000;
        }

        .kcal {
            font-weight: normal;
        }

        </style>

    
    <div class="card my-4">
        <div class="card-body">
            <span>
                <h2 class="card-title">Method</h2>
            </span>
            <div class="form-group my-2">
                <InputTextArea class="form-control" id="method" @bind-Value="@recipe.Method" rows="4" />
            </div>
        </div>
    </div>


    <div class="form-group my-2">
        <div>Recipe visibility</div>
        <InputRadioGroup @bind-Value="recipe.IsPublic">
            <InputRadio id="Public" Value="true" class="form-check-input" /><label class="form-check-label"
                for="Public">Public</label>
            <InputRadio id="Private" Value="false" class="form-check-input" /><label class="form-check-label"
                for="Private">Private</label>
        </InputRadioGroup>
    </div>
    <div class="form-group">
        <p>If you choose to create a private recipe, it will not be visible to other users</p>
    </div>
    <div class="form-group my-2">
        <button type="button" class="btn btn-danger" @onclick="GoBack">Cancel</button>
        <button type="submit" class="btn btn-success btn-block">Create</button>
        <div class="@messageCssClass">
            <span>@message</span>
        </div>
    </div>
</EditForm>






@code {
    string message = string.Empty;
    string messageCssClass = string.Empty;

    private RecipeCreateDTO recipe = new();

    private List<FoodItemAmountDTO> ingredients {get; set;} = new List<FoodItemAmountDTO>()
        {
            new FoodItemAmountDTO
            {
                Amount = 1.0f,
                FoodItem = new FoodItemDTO(
                    0,
                    "The ingredient",
                    100.0f,
                    0f,
                    0f,
                    0f,
                    0f,
                    0f,
                    0f,
                    0f,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                )
            }
        };

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private CategoryCreateDTO category = new CategoryCreateDTO();

    List<int> selectedCategoryIds = new List<int>();

    private List<CategoryDTO>? AllCategories { get; set; }



    private async void ShowModal()
    {
        var options = new ModalOptions
            {
                UseCustomLayout = true
            };
        var modal = Modal.Show<CategoryModal>("Cat Modal", options);

        var result = await modal.Result;


        if (!result.Cancelled)
        {

            await HandleCategoryAdded();
            StateHasChanged();
        }
    }

    async Task HandleCreateRecipe()
    {
        recipe.CategoryIDs = selectedCategoryIds;
        var response = await RecipeService.CreateRecipe(recipe);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("savedRecipes");
        }
    }

    protected override async Task OnInitializedAsync()
    {

        var user = (await CustomAuthStateProvider.GetAuthenticationStateAsync()).User;
        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
        {
            recipe.AuthorId = userId;
        }

        var catResponse = await CategoryService.GetCategories();
        if (catResponse.IsSuccessStatusCode)
        {
            AllCategories = await catResponse.Content.ReadFromJsonAsync<List<CategoryDTO>>() ?? new List<CategoryDTO>();
        }
        else
        {
            Console.WriteLine("The response was not successful");
        }
    }
    void UpdateSelectedCategories(int categoryId, ChangeEventArgs e)
    {
        if ((bool)e.Value!)
        {
            selectedCategoryIds.Add(categoryId);
        }
        else
        {
            selectedCategoryIds.Remove(categoryId);
        }
    }

    private async Task HandleCategoryAdded()
    {
        var catResponse = await CategoryService.GetCategories();
        if (catResponse.IsSuccessStatusCode)
        {
            AllCategories = await catResponse.Content.ReadFromJsonAsync<List<CategoryDTO>>() ?? new List<CategoryDTO>();
        }
        else
        {
            Console.WriteLine("The response was not successful");
        }

    }

     protected async void GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

}



