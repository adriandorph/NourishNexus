@page "/recipes/create"
@attribute [Authorize]
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@using server.Core.EF.DTO;
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider CustomAuthStateProvider
@inject RecipeService RecipeService
@inject CategoryService CategoryService

<PageTitle> Create Recipe </PageTitle>

<h1>Create Recipe</h1>
        
<EditForm Model="@recipe" OnSubmit="HandleCreateRecipe">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="title">Title</label>
        <InputText class="form-control" id="title" @bind-Value="@recipe.Title" />
    </div>

    <div class="form-group my-2">
        <label for="method">Method</label>
        <InputTextArea class="form-control" id="method" @bind-Value="@recipe.Method" rows="4" />

    </div>

    <div class="form-group my-2">
        <label for="description">Description</label>
        <InputTextArea class="form-control" id="description" @bind-Value="@recipe.Description" rows="4" />
    </div>

    <div class="form-group my-2">
        <label for="categories">Choose Category</label>
    <InputSelect id="categories" class="mt-2 form-control" @bind-Value="recipe.CategoryIDs" multiple>
    @if (AllCategories != null)
    {
        @foreach (var category in AllCategories)
        {
            <option value="@category.Id">@category.Name</option>
        }
    }
</InputSelect>
    </div>

    <div class="form-group my-2">
        <div>Recipe visibility</div>
        <InputRadioGroup @bind-Value="recipe.IsPublic">
            <InputRadio id="Public" Value="true" class="form-check-input" /><label class="form-check-label" for="Public">Public</label>
            <InputRadio id="Private" Value="false" class="form-check-input" /><label class="form-check-label" for="Private">Private</label>
        </InputRadioGroup>
    </div>
    <div class="form-group">
        <p>If you choose to create a private recipe, it will not be visible to other users</p>
    </div>
    <div class="form-group my-2">
        <button type="button" class="btn btn-danger">Cancel</button>
        <button type="submit" class="btn btn-success btn-block">Create</button>
        <div class ="@messageCssClass">
        <span>@message</span>
    </div>
    </div>
</EditForm>
 




@code {
    string message = string.Empty;
    string messageCssClass = string.Empty;

    private RecipeCreateDTO recipe = new();

    private List<int> selectedCategories = new List<int>();

    private List<CategoryDTO>? AllCategories { get; set; }

    async Task HandleCreateRecipe()
    {
        var response = await RecipeService.CreateRecipe(recipe);
        
        if(response.IsSuccessStatusCode)
        {
            messageCssClass = "text-success";
            message = "Recipe created successfully";
        } 
        
        else if(response.StatusCode == System.Net.HttpStatusCode.NotFound) 
        {
            messageCssClass = "text-danger";
            message = "Login failed, user does not exist. Please register.";
        } 
        else 
        {
            messageCssClass = "text-danger";
            message = "Login failed";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        
        var user = (await CustomAuthStateProvider.GetAuthenticationStateAsync()).User;
        Console.WriteLine("The user is " + user);
        Console.WriteLine("And the name is" + user.FindFirst(ClaimTypes.Name));
        Console.WriteLine("And the email is" + user.FindFirst(ClaimTypes.Email));
        Console.WriteLine("And the id is" + user.FindFirst(ClaimTypes.NameIdentifier));
        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
        {
            Console.WriteLine("Setting the ID now!");
            recipe.AuthorId = userId;
        }
        Console.WriteLine("ANd the author id is" + recipe.AuthorId);

        var catResponse = await CategoryService.GetCategories();
        if(catResponse.IsSuccessStatusCode){
            AllCategories = await catResponse.Content.ReadFromJsonAsync<List<CategoryDTO>>() ?? new List<CategoryDTO>();
            Console.WriteLine("Got here!");
            foreach(CategoryDTO cat in AllCategories){
                Console.WriteLine("NAME IS" + cat.Name);
            }
        }
        else{
            Console.WriteLine("The response was not successful");
        }
    }
        
}



