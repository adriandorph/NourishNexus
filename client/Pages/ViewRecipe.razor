@page "/viewRecipe/{Id}"
@using System.Globalization
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using server.Core.EF.DTO
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider CustomAuthStateProvider
@inject RecipeService RecipeService
@inject CategoryService CategoryService
@inject UserService UserService
@inject FoodItemService FoodItemService
@inject IJSRuntime JSRuntime

@if (recipe != null)
{
    <h1>@recipe.Title</h1>
    <h6><i> By @recipeAuthor</i></h6>
    <hr />
    <div class="row">
    <div class="col">
        <div class="category-checkboxes d-flex flex-wrap">
            @if (recipe != null && AllCategories != null && AllCategories.Any())
                {
                    @foreach (var categoryid in recipe.CategoryIDs)
                    {
                        @foreach (var cat in AllCategories)
                        {
                            if (cat.Id == categoryid)
                            {
                                <div class="category-box mr-2 mb-2 rounded">
                                    <label>@cat.Name</label>
                                </div>
                            }
                        }
                    }
                }
            </div>
        </div>

        <style>
            .category-box {
                background-color: #eee;
                padding: 4px 8px;
                margin: 4px 8px;
            }

            .category-box label {
                margin-bottom: 0;
            }

            .category-box input[type=checkbox] {
                margin-right: 4px;
            }
        </style>
    </div>

    <div class="card my-4">
        <div class="card-body">
            <span>
                <h2 class="card-title">Description</h2>
            </span>
            <p class="card-text">
                <MultilineString Value=@recipe!.Description />
            </p>
        </div>
    </div>

    <div class="card my-4">
    <div class="card-body">
        <span class="d-flex justify-content-between">
            <h2 class="card-title">Ingredients</h2>
            <h4 class="text-right kcal ">@TotalCalories() kcal </h4>
        </span>
        <div class="scale">
            Scale x
            <input class="scale-input" step="0.01" type="number" id="scaleInput" value="1" @onchange="UpdateIngredients" min="0">
        </div>
        @foreach (FoodItemAmountDTO ingredient in ingredients)
            {
                <div class="ingredient-box d-flex justify-content-between rounded mb-2">
                    <span class="ingredient-name">@ingredient.FoodItem!.Name</span>
                    <span class="ingredient-g">@FoodItemAmountGrams(ingredient) g</span>
                </div>
            }
        </div>
    </div>
    <style>
        .ingredient-box {
            background-color: #eee;
            padding: 8px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .ingredient-name {
            margin-right: 8px;
        }

        .ingredient-g {
            color: #000000;
        }

        .kcal {
            font-weight: normal;
        }

        .scale {
            margin-bottom: 10px
        }

        .scale-input {
            width: 50px;
            border-radius: 10px;
            text-align: center;
        }
    </style>

    <div class="card my-4">
        <div class="card-body">
            <h2 class="card-title">Method</h2>
            <p>
                <MultilineString Value=@recipe.Method />
            </p>
        </div>
    </div>
    @if (recipe.AuthorId == authorID)
    {
        <div class="mb-4">
    <h3>Visibility</h3>
    <p>@(recipe.IsPublic ? "Public" : "Private")</p>
        </div>
    }
    <div>
        <button type="button" class="btn btn-primary" @onclick="GoBack">Return</button>
        @if (recipe.AuthorId == authorID)
        {
            <button class="btn btn-success mx-1" @onclick="EditRecipe">Edit</button>
        }
    </div>
}
else
{
    <div class="text-center mt-4">
    <h4>Recipe not found</h4>
    <button type="button" class="btn btn-primary" @onclick="GoBack">Return</button>
</div>
}

@code {
    private RecipeDTO? recipe { get; set; }
    [Parameter]
    public string Id { get; set; } = "";

    public string authorName { get; set; } = "";

    private int authorID;
    private float scale { get; set; } = 1.0f;

    private string? recipeAuthor;
    private List<FoodItemAmountDTO> ingredients { get; set; } = new List<FoodItemAmountDTO>();

    private List<CategoryDTO>? AllCategories { get; set; }

    async Task<string> GetRecipeCategory(int categoryID)
    {
        var response = await CategoryService.GetCategory(categoryID);
        if (response.IsSuccessStatusCode)
        {
            var category = (await response.Content.ReadFromJsonAsync<CategoryDTO>())!;
            return category.Name;
        }
        return "";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = (await CustomAuthStateProvider.GetAuthenticationStateAsync()).User;
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
            int.TryParse(userIdClaim!.Value, out authorID);
            recipe = await RecipeService.GetRecipe(int.Parse(Id));
            recipeAuthor = await GetRecipeAuthor(recipe.AuthorId);
            if (recipe == null)
            {
                throw new ApplicationException("Recipe not found");
            }
            ingredients = await FoodItemService.GetByRecipe(recipe.Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        var catResponse = await CategoryService.GetCategories();
        if (catResponse.IsSuccessStatusCode)
        {
            AllCategories = await catResponse.Content.ReadFromJsonAsync<List<CategoryDTO>>() ?? new List<CategoryDTO>();
        }
    }
    protected async void GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    public void EditRecipe()
    {
        NavigationManager.NavigateTo($"recipes/edit/{recipe!.Id}");
    }

    public async Task<string> GetRecipeAuthor(int userid)
    {
        var user = await UserService.GetUserByID(userid);
        return user.Nickname;
    }

    private float TotalCalories()
    {
        float sum = 0.0f;
        foreach (var ingredient in ingredients)
        {
            sum += FoodItemCalories(ingredient);
        }
        return sum;
    }

    private float FoodItemCalories(FoodItemAmountDTO item)
    => item.Amount * item.FoodItem!.Calories * scale;

    private float FoodItemAmountGrams(FoodItemAmountDTO item)
    => item.Amount * 100 * scale;

    private void UpdateIngredients(ChangeEventArgs e)
    {
        Console.WriteLine(e.Value!.ToString());
        if (float.TryParse(e.Value!.ToString(), System.Globalization.NumberStyles.Any, CultureInfo.CurrentCulture, out float newScale))
        {
            scale = newScale;
            Console.WriteLine($"New value: {scale}");
        }
    }
}
