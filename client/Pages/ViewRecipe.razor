@page "/viewRecipe/{Id}"

@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using server.Core.EF.DTO
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider CustomAuthStateProvider
@inject RecipeService RecipeService
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="row">
        <div class="col-12 col-md-8 offset-md-2">
            @if (recipe != null)
            {
                <h1 class="mb-4">@recipe.Title</h1>
                <div class="mb-4">
                    <h3>Description</h3>
                    <p>@recipe.Description</p>
                </div>
                <div class="mb-4">
                    <h3>Method</h3>
                    <p>@recipe.Method</p>
                </div>
                <div class="mb-4">
                    <h3>Categories</h3>
                    <ul>
                        @if(recipe != null && AllCategories !=null && AllCategories.Any()){
                        @foreach (var categoryid in recipe.CategoryIDs)
                        {
                            @foreach ( var cat in AllCategories)
                            {
                                if(cat.Id == categoryid){
                                    <li>@cat.Name</li>
                                }
                            }
                            

                        }
                        }
                    </ul>
                </div>
                <div class="mb-4">
                    <h3>Visibility</h3>
                    <p>@(recipe.IsPublic ? "Public" : "Private")</p>
                </div>
                <div class="">
                    <button type="button" class="btn btn-primary" @onclick="GoBack">Return</button>
                </div>
            }
            else
            {
                <div class="text-center mt-4">
                    <h4>Recipe not found</h4>
                    <button type="button" class="btn btn-primary" @onclick="GoBack">Return</button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private RecipeDTO? recipe {get; set;}
    [Parameter]
    public string Id { get; set; } = "";

    private List<CategoryDTO>? AllCategories { get; set; }

    async Task<string> GetRecipeCategory(int categoryID){
        var response = await CategoryService.GetCategory(categoryID);
        if(response.IsSuccessStatusCode){
            var category = (await response.Content.ReadFromJsonAsync<CategoryDTO>())!;
            return category.Name;
        }
        return "";
    }
        



    protected override async Task OnInitializedAsync()
    {
        try{
            var user = (await CustomAuthStateProvider.GetAuthenticationStateAsync()).User;
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
            int.TryParse(userIdClaim!.Value, out int authorID);
            Console.WriteLine("User id is" + authorID);
            var response = await RecipeService.GetRecipe(int.Parse(Id));
            if (response.IsSuccessStatusCode){
                recipe = (await response.Content.ReadFromJsonAsync<RecipeDTO>())!;
                if (recipe == null) {
                    throw new ApplicationException("Recipe not found");
                }
            } else {
                throw new ApplicationException($"Error retrieving recipe: {response.StatusCode}");
            }
        }
        catch(Exception e){
            Console.WriteLine(e.Message);
        }

        var catResponse = await CategoryService.GetCategories();
        if(catResponse.IsSuccessStatusCode){
            AllCategories = await catResponse.Content.ReadFromJsonAsync<List<CategoryDTO>>() ?? new List<CategoryDTO>();
    }
}
    protected async void GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    
}
