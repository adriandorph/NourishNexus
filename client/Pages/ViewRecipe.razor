@page "/viewRecipe/{Id}/{Add}/{Scale}"
@using System.Globalization
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Text.Json
@using server.Core.EF.DTO
@using Microsoft.JSInterop;
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider CustomAuthStateProvider
@inject RecipeService RecipeService
@inject CategoryService CategoryService
@inject UserService UserService
@inject FoodItemService FoodItemService
@inject IJSRuntime JSRuntime

@if (recipe != null)
{
    <h1>@recipe.Title</h1>
    <h6><i> By @recipeAuthor</i></h6>
    <hr />
    <div class="row">
        <div class="col">
            <div class="category-checkboxes d-flex flex-wrap">
                @if(AllCategories == null){
                    <p><em>Loading...</em></p>
                }
                else if (recipe != null && AllCategories.Any())
                {
                    @foreach (var categoryid in recipe.CategoryIDs)
                    {
                        @foreach (var cat in AllCategories)
                        {
                            if (cat.Id == categoryid)
                            {
                                <div class="category-box mr-2 mb-2 rounded">
                                    <label>@cat.Name</label>
                                </div>
                            }
                        }
                    }
                }
            </div>
        </div>
    </div>

    <div class="view card my-4">
        <div class="card-body">
            <span>
                <h2 class="card-title">Description</h2>
            </span>
            <p class="card-text">
                <MultilineString Value=@recipe!.Description />
            </p>
        </div>
    </div>

    <div class="view card my-4">
        <div class="card-body">
            <span class="d-flex justify-content-between">
                <h2 class="card-title">Ingredients</h2>
                <h4 class="text-right kcal ">@TotalCalories() kcal </h4>
            </span>
            <div class="scale">
                Scale x
                <input class="scale-input" step="0.5" type="number" id="scaleInput" value="@scale"  @onchange="UpdateIngredients"
                    min="0">
            </div>
            @foreach (FoodItemAmountDTO ingredient in ingredients)
            {
                <div class="ingredient-box d-flex justify-content-between rounded mb-2">
                    <span class="ingredient-name">@ingredient.FoodItem!.Name</span>
                    <span class="ingredient-g">@FoodItemAmountGrams(ingredient) g</span>
                </div>
            }
        </div>
    </div>

    <div class="view card my-4">
        <div class="card-body">
            <h2 class="card-title">Method</h2>
            <p>
                <MultilineString Value=@recipe.Method />
            </p>
        </div>
    </div>
    @if (recipe.AuthorId == userID)
    {
        <div class="view card my-4">
            <div class="card-body">
                <h4 class="card-title">Visibility</h4>
                <p>@(recipe.IsPublic ? "Public" : "Private")</p>
            </div>
        </div>
    }
    <div>
        <button type="button" class="btn btn-primary btn-margin" @onclick="GoBack">Return</button>
        @if (recipe.AuthorId == userID && Add == "view")
        {
            <button class="btn btn-success btn-margin" @onclick="EditRecipe">Edit</button>
        }
        else if (Add == "add")
        {
            <button class="btn btn-success btn-margin" @onclick="AddRecipe">Add</button>
        }
        else if (recipe.AuthorId != userID && user != null && user.SavedRecipeIds.Contains(recipe.Id))
        {
            <button class="btn btn-danger mr-3 btn-margin" onclick="@(async () => await HandleUnsaveRecipe(recipe.Id))">Unsave recipe </button>
        }
        else if (recipe.AuthorId != userID && user != null && !user.SavedRecipeIds.Contains(recipe.Id))
        {
            <button class="btn btn-secondary btn-margin" onclick="@(async () => await HandleSaveRecipe(recipe.Id))">Save recipe </button>
        }
    </div>
}
else
{
    <div class="text-center mt-4">
        <h4>Recipe not found</h4>
        <button type="button" class="btn btn-primary" @onclick="GoBack">Return</button>
    </div>
}

<br>

@code {
    private RecipeDTO? recipe { get; set; }
    [Parameter]
    public string Id { get; set; } = "";
    [Parameter]
    public string Add {get; set;} = "";

    private string authorName { get; set; } = "";
    
    private UserDTO? user { get; set; }

    private int userID;

    [Parameter]
    public string Scale { get; set; } = "";

    private float scale {get; set;} = 1.0f;

    private string? recipeAuthor;
    private List<FoodItemAmountDTO> ingredients { get; set; } = new List<FoodItemAmountDTO>();

    private List<CategoryDTO>? AllCategories { get; set; }

    async Task<string> GetRecipeCategory(int categoryID)
    {
        var response = await CategoryService.GetCategory(categoryID);
        if (response.IsSuccessStatusCode)
        {
            var category = (await response.Content.ReadFromJsonAsync<CategoryDTO>())!;
            return category.Name;
        }
        return "";
    }

    protected override async Task OnInitializedAsync()
    {
        var userClaim = (await CustomAuthStateProvider.GetAuthenticationStateAsync()).User;
        var userIdClaim = userClaim.FindFirst(ClaimTypes.NameIdentifier);
        int.TryParse(userIdClaim!.Value, out userID);
        user = await UserService.GetUserByID(userID);
        recipe = await RecipeService.GetRecipe(int.Parse(Id));
        recipeAuthor = await GetRecipeAuthor(recipe.AuthorId);
        if (recipe == null)
        {
            throw new ApplicationException("Recipe not found");
        }
        ingredients = await FoodItemService.GetByRecipe(recipe.Id);

        var catResponse = await CategoryService.GetCategories();
        if (catResponse.IsSuccessStatusCode)
        {
            AllCategories = await catResponse.Content.ReadFromJsonAsync<List<CategoryDTO>>() ?? new List<CategoryDTO>();
        }

        UpdateIngredients(Scale);
    }
    protected async void GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    public void EditRecipe()
    {
        NavigationManager.NavigateTo($"recipes/edit/{recipe!.Id}");
    }

    public async Task AddRecipe()
    {
        //Make recipeAmountDTO
        var recipeAmount = new RecipeAmountDTO(scale, recipe!);

        //Save in NN_Recipe
        string recipeSerialized = JsonSerializer.Serialize<RecipeAmountDTO>(recipeAmount);
        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "NN_Recipe", recipeSerialized);

        await JSRuntime.InvokeVoidAsync("history.go", -2);
    }

    public async Task<string> GetRecipeAuthor(int userid)
    {
        var user = await UserService.GetUserByID(userid);
        return user.Nickname;
    }

    private string TotalCalories()
    {
        float sum = 0.0f;
        foreach (var ingredient in ingredients)
        {
            sum += FoodItemCalories(ingredient);
        }
        return $"{(sum):0.##}";
    }

    private float FoodItemCalories(FoodItemAmountDTO item)
    => item.Amount * item.FoodItem!.Calories * scale;

    private string FoodItemAmountGrams(FoodItemAmountDTO item)
    {
        float f = item.Amount * 100 * scale;
        return $"{(f):0.##}";
    }

    private void UpdateIngredients(ChangeEventArgs e)
    {
        CultureInfo.CurrentCulture = new CultureInfo("en-US");
        UpdateIngredients(e.Value!.ToString()!);
    }

    private void UpdateIngredients(string s)
    {
        try
        {
            var newscale = Convert.ToSingle(s, CultureInfo.InvariantCulture);
            if (newscale >= 0) scale = newscale;
        }
        catch (Exception)
        {}
    }

    public async Task HandleUnsaveRecipe(int id)
    {
        var updatedSavedRecipes = new List<int>();
        updatedSavedRecipes.AddRange(user!.SavedRecipeIds);
        updatedSavedRecipes.Remove(id);
        var userUpdate = new UserUpdateDTO
            {
                Id = userID,
                SavedRecipeIds = updatedSavedRecipes
            };

        await UserService.UpdateUser(userUpdate);

        user = await UserService.GetUserByID(userID);
        StateHasChanged();
    }

    public async Task HandleSaveRecipe(int id)
    {
        var updatedSavedRecipes = new List<int>();
        updatedSavedRecipes.AddRange(user!.SavedRecipeIds);
        updatedSavedRecipes.Add(recipe!.Id);
        var userUpdate = new UserUpdateDTO
            {
                Id = userID,
                SavedRecipeIds = updatedSavedRecipes
            };

        await UserService.UpdateUser(userUpdate);

        user = await UserService.GetUserByID(userID);
        StateHasChanged();
    }
}
