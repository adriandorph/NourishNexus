@page "/viewRecipe/{Id}"

@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using server.Core.EF.DTO;
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider CustomAuthStateProvider
@inject RecipeService RecipeService
@inject IJSRuntime JSRuntime

<h3>Title</h3>
@if (recipe !=null){
<h1>@recipe.Title</h1>
<div>
    <h3>Description</h3>
    <p>@recipe.Description</p>
</div>
<div>
    <h3>Method</h3>
    <p>@recipe.Method</p>
</div>
<div>
    <h3>Categories</h3>
    <ul>
        @foreach (var category in recipe.CategoryIDs)
        {
            <li>@category</li>
        }
    </ul>
</div>
<div>
    <h3>Visibility</h3>
    <p>@recipe.IsPublic</p>
</div>
<div>
    <button type="button" class="btn btn-primary" @onclick="GoBack">Return</button>
</div>
}

@code {
    private RecipeDTO? recipe {get; set;}
    [Parameter]
    public string Id { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        try{
            var user = (await CustomAuthStateProvider.GetAuthenticationStateAsync()).User;
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
            int.TryParse(userIdClaim!.Value, out int authorID);
            Console.WriteLine("User id is" + authorID);
            var response = await RecipeService.GetRecipe(int.Parse(Id));
            if (response.IsSuccessStatusCode){
                recipe = (await response.Content.ReadFromJsonAsync<RecipeDTO>())!;
                if (recipe == null) {
                throw new ApplicationException("Recipe not found");
    }
}       else {
            throw new ApplicationException($"Error retrieving recipe: {response.StatusCode}");
}       
        }
        catch(Exception e){
            Console.WriteLine(e.Message);
        }
    }

    protected async void GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
