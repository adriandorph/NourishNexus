@page "/register"
@using server.Core.EF.DTO
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager manager
@inject UserService UserService

<PageTitle>Register</PageTitle>

<div id="registerdiv">
<h1 id="register" class="pop"><b>Register</b></h1>
</div>

<EditForm class="my-5" Model="user" OnValidSubmit="HandleRegistration" Context="editext">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" type="email" @bind-Value="user.Email" class="form-control" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3">
        <label for="nickname">Nickname</label>
        <InputText id="nickname" @bind-Value="user.Nickname" class="form-control" />
        <ValidationMessage For="@(() => user.Nickname)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" type="password" @bind-Value="user.Password" class="form-control" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <div class="mb-3">
        <label for="confirmpassword">Confirm Password</label>
        <InputText id="confirmpassword" type="password" @bind-Value="user.ConfirmPassword" class="form-control" />
        <ValidationMessage For="@(() => user.ConfirmPassword)" />
    </div>
    <div id="signupdiv">
    <button type="submit" class="btn btn-primary">Register</button>
    <div class="@messageCssClass">
        <span>@message</span>
    </div>
    </div>
    <div id="message" class="my-3">
        <span>Already signed up? <a href="/login">Click here to sign in!</a></span>
    </div>
</EditForm>

@code {
    private UserCreateDTO user = new UserCreateDTO();

    string message = string.Empty;
    string messageCssClass = string.Empty;

    private async Task HandleRegistration()
    {
        var response = await UserService.RegisterUser(user);
        if (response.IsSuccessStatusCode)
        {
            var loginRequest = new LoginRequest(user.Email ?? "", user.Password ?? "");
            var loginResponse = await UserService.Login(loginRequest);
            if (loginResponse.IsSuccessStatusCode)
            {
                var token = await loginResponse.Content.ReadAsStringAsync();
                await LocalStorage.SetItemAsync("nourish_nexus_auth_token", token);
                await AuthStateProvider.GetAuthenticationStateAsync();
                manager.NavigateTo("");
            }
            else
            {
                messageCssClass = "text-danger";
                message = "Could not authenticate you after registration";
            }
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            messageCssClass = "text-danger";
            message = "User already exists in the system, please login";
        }
    }
}

