@page "/Community"
@attribute [Authorize]
@using System.Collections.Generic
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using server.Core.EF.DTO;
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject RecipeService RecipeService
@inject UserService UserService

<h1 class="text-center mb-3">Community Recipes</h1>
<div class="container">
    <div class="row">
        @if (recipes != null && recipes.Any())
        {
            @foreach (var recipe in recipes)
            {
                @if (recipe.AuthorId != theAuthorId)
                {
                    <div class="col-md-4">
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h5 class="card-title">@recipe.Title</h5>
                                    <p class="card-text">@recipe.Description</p>
                                    <a href="@($"viewRecipe/{recipe.Id}")" class="btn btn-primary mx-2">View</a>
                                    @if(_user!.SavedRecipeIds.Contains(recipe.Id))
                                    {
                                        <a href="" class="btn btn-danger" onclick="@(async () => await HandleUnsaveRecipe(recipe.Id))">Unsave recipe</a>        
                                    }
                                    else
                                    {
                                        <a href="" class="btn btn-success" onclick="@(async () => await HandleSaveRecipe(recipe.Id))">Save recipe</a>        
                                    }
                                </div>
                            </div>
                        </div>
                }
            }
        }


    </div>
</div>


@code
{
    private int theAuthorId;
    private UserDTO? _user;
    private List<RecipeDTO>? recipes;

    private bool isRecipeSaved = false;

    private RecipeCreateDTO recipe = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userClaim = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
            var userIdClaim = userClaim.FindFirst(ClaimTypes.NameIdentifier);
            int.TryParse(userIdClaim!.Value, out theAuthorId);
            _user = await UserService.GetUserByID(theAuthorId);
            var response = await RecipeService.GetPublicRecipes();
            if (response.IsSuccessStatusCode)
            {
                recipes = await response.Content.ReadFromJsonAsync<List<RecipeDTO>>() ?? new List<RecipeDTO>();
            }
            else
            {
                recipes = new List<RecipeDTO>();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Oh, it failed!" + e.Message);
        }
    }

    public async Task HandleSaveRecipe(int id)
    {
        var updatedSavedRecipes = new List<int>();
        updatedSavedRecipes.AddRange(_user!.SavedRecipeIds);
        updatedSavedRecipes.Add(id);
        var userUpdate = new UserUpdateDTO
        {
            Id = theAuthorId,
            SavedRecipeIds = updatedSavedRecipes
        };

        await UserService.UpdateUser(userUpdate);
        
        _user = await UserService.GetUserByID(theAuthorId);
         isRecipeSaved = true;
    }

    public async Task HandleUnsaveRecipe(int id)
    {
        var updatedSavedRecipes = new List<int>();
        updatedSavedRecipes.AddRange(_user!.SavedRecipeIds);
        updatedSavedRecipes.Remove(id);
        var userUpdate = new UserUpdateDTO
        {
            Id = theAuthorId,
            SavedRecipeIds = updatedSavedRecipes
        };

        await UserService.UpdateUser(userUpdate);
        
        _user = await UserService.GetUserByID(theAuthorId);
        isRecipeSaved = false;
    }
}
