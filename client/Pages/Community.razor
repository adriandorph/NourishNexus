@page "/Community"
@attribute [Authorize]
@using System.Collections.Generic
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using server.Core.EF.DTO;
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject RecipeService RecipeService
@inject UserService UserService
@inject IJSRuntime JSRuntime

<h1 class="text-center mb-3">Community Recipes</h1>

<div class="form-group my-3">
    <input type="text" class="form-control rounded-edge" placeholder="Search..." id="search-query" @oninput="PerformSearch" />
</div>
<hr class="mb-4">

<div class="container">
    <div class="row">
        @if (recipes != null && recipes.Any())
        {
            @foreach (var recipe in recipes)
            {
                @if (recipe.AuthorId != theAuthorId)
                {
                    <div class="col-12 col-md-6 col-xl-4">
                        <div class="card mb-3">
                            <div class="card-body">
                                <h5 class="card-title">@recipe.Title</h5>
                                <p class="card-text">@((recipe.Description.Length > 200) ? $"{recipe.Description.Substring(0, recipeDescriptionLength)}..." : recipe.Description)</p>
                                <a href="@($"viewRecipe/{recipe.Id}/view/1")" class="btn btn-primary mx-2">View</a>
                                @if (_user!.SavedRecipeIds.Contains(recipe.Id))
                                {
                                    <button class="btn btn-danger"
                                        onclick="@(async () => await HandleUnsaveRecipe(recipe.Id))">Unsave recipe
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-secondary" onclick="@(async () => await HandleSaveRecipe(recipe.Id))">Save
                                        recipe
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>

<div class="d-flex scrolltop align-items-center justify-content-left fixed-bottom">
    <button @onclick="ScrollToTop" class="btn btn-info scroll-to-top shadow-custom"> 
        <i class ="oi oi-chevron-top"></i>To top</button>
</div>

<br>

<style>
    .rounded-edge {
    border-radius: 10px !important;
}
</style>


@code
{
    private int theAuthorId;
    private UserDTO? _user;
    private List<RecipeDTO>? recipes;

    private int recipeDescriptionLength = 200;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userClaim = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
            var userIdClaim = userClaim.FindFirst(ClaimTypes.NameIdentifier);
            int.TryParse(userIdClaim!.Value, out theAuthorId);
            _user = await UserService.GetUserByID(theAuthorId);
            recipes = await RecipeService.GetPublicRecipes();
        }
        catch (Exception)
        {
        }
    }

    private void ScrollToTop()
    {
        JSRuntime.InvokeVoidAsync("scrollTo", 0, 0);
    }

    public async Task HandleSaveRecipe(int id)
    {
        var updatedSavedRecipes = new List<int>();
        updatedSavedRecipes.AddRange(_user!.SavedRecipeIds);
        updatedSavedRecipes.Add(id);
        var userUpdate = new UserUpdateDTO
            {
                Id = theAuthorId,
                SavedRecipeIds = updatedSavedRecipes
            };

        await UserService.UpdateUser(userUpdate);

        _user = await UserService.GetUserByID(theAuthorId);
        StateHasChanged();
    }

    public async Task HandleUnsaveRecipe(int id)
    {
        var updatedSavedRecipes = new List<int>();
        updatedSavedRecipes.AddRange(_user!.SavedRecipeIds);
        updatedSavedRecipes.Remove(id);
        var userUpdate = new UserUpdateDTO
            {
                Id = theAuthorId,
                SavedRecipeIds = updatedSavedRecipes
            };

        await UserService.UpdateUser(userUpdate);

        _user = await UserService.GetUserByID(theAuthorId);
        StateHasChanged();
    }


    private async Task PerformSearch(ChangeEventArgs e)
    {
        string searchQuery = e.Value != null ? e.Value!.ToString() ?? "" : "";
        if (searchQuery.Length < 1) 
        {
            recipes = await RecipeService.GetPublicRecipes();
        }
        else
        {
            recipes = await RecipeService.GetFromCommunityBySearchWord(searchQuery);
        }
    }
}
