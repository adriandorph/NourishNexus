@page "/login"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager manager
@inject UserService UserService

<PageTitle>Login</PageTitle>
<div id="welcomediv">
    <h1 id="welcome" class="pop"> <b>Welcome back!</b> </h1>
</div>

<EditForm class="my-5" Model="userEmail" OnSubmit="HandleLogin">
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" type="email" @bind-Value="userEmail" class="form-control" />
        @if (!string.IsNullOrEmpty(userEmail) && !IsValidEmail(userEmail))
        {
            <div class="text-danger">Invalid email address</div>
        }
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" type="password" @bind-Value="userPassword" class="form-control" />
        @if (string.IsNullOrEmpty(userPassword))
        {
            <div class="text-danger">Password is required</div>
        }
    </div>
    <div id="signindiv">
        <button type="submit" class="btn btn-primary">Sign in</button>
        <div class="@messageCssClass">
            <p>@message</p>
        </div>
    </div>
    <div id="message" class="my-3">
        <span>Don't have an account yet? <a href="/register">Click here to register!</a></span>
    </div>
</EditForm>



@code {

    string userEmail { get; set; } = "";
    string userPassword { get; set; } = "";

    string message = string.Empty;
    string messageCssClass = string.Empty;

    async Task HandleLogin()
    {
        var loginRequest = new LoginRequest(userEmail, userPassword);
        var response = await UserService.Login(loginRequest);

        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            await LocalStorage.SetItemAsync("nourish_nexus_auth_token", token);
            await AuthStateProvider.GetAuthenticationStateAsync();
            manager.NavigateTo("");
        }

        else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            messageCssClass = "text-danger";
            message = "Login failed, user does not exist. Please register.";
        }
        else
        {
            messageCssClass = "text-danger";
            message = "Login failed";
        }
    }

    bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}