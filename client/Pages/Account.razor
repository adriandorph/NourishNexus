@page "/account"
@using server.Core.EF.DTO
@attribute [Authorize]
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserService UserService
@inject ILocalStorageService LocalStorage

<PageTitle> Account </PageTitle>

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h1 class="card-title text-center mb-4">Account</h1>

<EditForm Model="userUpdate" OnValidSubmit="HandleUpdateUser">

    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="userUpdate.Email" />
        <ValidationMessage For="@(() => userUpdate.Email)" />
    </div>

    <div class="mb-3">
        <label for="nickname">Nickname</label>
        <InputText id="nickname" class="form-control" @bind-Value="userUpdate.Nickname" />
    </div>

    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="password" />
        <ValidationMessage For="@(() => password)" />
    </div>

    <div class="mb-3">
        <label for="newpassword">New Password</label>
        <InputText id="newpassword" class="form-control" type="password" @bind-Value="userUpdate.Password" />
        <ValidationMessage For="@(() => userUpdate.Password)" />
    </div>

    <div class="mb-3">
        <label for="confirmpassword">Confirm New Password</label>
        <InputText id="confirmpassword" class="form-control" type="password" @bind-Value="userUpdate.ConfirmPassword" />
        <ValidationMessage For="@(() => userUpdate.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary">Update</button>
    <div class ="@messageCssClass">
        <span>@message</span>
    </div>
</EditForm>
</div>
        </div>
    </div>
</div>
</div>

@code {
    private UserUpdateDTO userUpdate = new UserUpdateDTO();
    private UserDTO? user {get; set;}
    private string password {get; set;} = "";

    Claim? userIdClaim;
    string message = string.Empty;
    string messageCssClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var claim = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        userIdClaim = claim.FindFirst(ClaimTypes.NameIdentifier)!;
        var userEmailClaim = claim.FindFirst(ClaimTypes.Email)!.Value;
        var userNicknameClaim = claim.FindFirst(ClaimTypes.Name)!.Value;
        int.TryParse(userIdClaim!.Value, out int userID);
        userUpdate.Id = userID;
        userUpdate.Nickname = userNicknameClaim;
        userUpdate.Email = userEmailClaim;
        user = await UserService.GetUserByID(userID);
    }

    async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("nourish_nexus_auth_token");
        await AuthStateProvider.GetAuthenticationStateAsync();
    }

    

    async Task HandleUpdateUser()
    {
        var r = await UserService.Login(new LoginRequest(user!.Email, password));
        if (!r.IsSuccessStatusCode)
        {
            messageCssClass = "text-danger";
            message = "Password is incorrect. Enter your password to update your account.";

            return;
        }

        if (userUpdate.Nickname == user!.Nickname) userUpdate.Nickname = null;
        if (userUpdate.Email == user!.Email) userUpdate.Email = null;

        
        var response = await UserService.UpdateUser(userUpdate);

        user = await UserService.GetUserByID(user.Id);
        userUpdate.Nickname = user.Nickname;
        userUpdate.Email = user.Email;
        
        if(response.IsSuccessStatusCode)
        {
            //Logout and login again to create an updated token
            await LocalStorage.RemoveItemAsync("nourish_nexus_auth_token");
            var loginRequest = new LoginRequest(user!.Email, userUpdate.Password ?? password);
            var loginResponse = await UserService.Login(loginRequest);
            var token = await loginResponse.Content.ReadAsStringAsync();
            await LocalStorage.SetItemAsync("nourish_nexus_auth_token",token);
            await AuthStateProvider.GetAuthenticationStateAsync();

            messageCssClass = "text-success";
            message = "Updated user successfully";
        } 
        
        else 
        {
            messageCssClass = "text-danger";
            message = "Could not update your user";
        }

        userUpdate.Password = null;
        userUpdate.ConfirmPassword = null;
    }
}
