@page "/savedRecipes"
@attribute [Authorize]
@using System.Collections.Generic
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using server.Core.EF.DTO;
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider CustomAuthStateProvider
@inject RecipeService RecipeService


<h1 class="text-center mb-3">Saved Recipes</h1>

<div class="container">
        <div class="row">
            <div class="col-md-12">
                @if (recipes !=null && recipes.Any())
                {
                        foreach(var recipe in recipes)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h5 class="card-title">@recipe.Title</h5>
                                    <p class="card-text">@recipe.Description</p>
                                    <a href="@($"viewRecipe/{recipe.Id}")" class="btn btn-primary">View</a>
                                </div>
                            </div>
                        }
                 } else {
                    <p>You have not saved any recipes yet. Please <a href="recipes/create">create a recipe</a>, or <a href ="Community">add a recipe from the Community</a></p>
                    }
            </div>
        </div>
</div>

@code 
{
    
    private List<RecipeDTO>? recipes;

    protected override async Task OnInitializedAsync()
{
    try{
        var user = (await CustomAuthStateProvider.GetAuthenticationStateAsync()).User;
        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        int.TryParse(userIdClaim!.Value, out int authorID);
        Console.WriteLine("User id is" + authorID);
        var response = await RecipeService.GetRecipes(authorID);
        if (response.IsSuccessStatusCode){
            recipes = await response.Content.ReadFromJsonAsync<List<RecipeDTO>>() ?? new List<RecipeDTO>();
        }
        else {
            recipes = new List<RecipeDTO>();
        }
    }
    catch(Exception e){
        Console.WriteLine("Oh, it failed!" + e.Message);
    }
}
}