@page "/savedRecipes"
@attribute [Authorize]
@using System.Collections.Generic
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using server.Core.EF.DTO;
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider CustomAuthStateProvider
@inject RecipeService RecipeService
@inject UserService UserService


<h1 class="text-center mb-3">Saved Recipes</h1>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            @if (recipes == null)
            {
                <p><em>Loading...</em></p>
            }
            else if (recipes.Any())
            {
                foreach (var recipe in recipes)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5 class="card-title">@recipe.Title</h5>
                            <p class="card-text">@((recipe.Description.Length > 200) ? $"{recipe.Description.Substring(0, recipeDescriptionLength)}..." : recipe.Description)</p>
                            <a href="@($"viewRecipe/{recipe.Id}")" class="btn btn-primary mx-2">View</a>
                            @if (recipe.AuthorId == userID)
                            {
                                <a href="@($"recipes/edit/{recipe.Id}")" class="btn btn-success mx-2">Edit</a>
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <p>You have not saved any recipes yet. Please <a href="recipes/create">create a recipe</a>, or <a
                        href="Community">add a recipe from the Community</a></p>
            }
        </div>
    </div>
</div>

<div class="sticky-button my-5">
    <button class="btn btn-success btn-lg" @onclick="HandleCreateRecipe">Create Recipe</button>
</div>

<style>
    .sticky-button {
        position: fixed;
        left: 50%;
        bottom: 20px;
    }
</style>

@code
{

    private List<RecipeDTO>? recipes;

    private int userID;

    private int recipeDescriptionLength = 200;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userClaim = (await CustomAuthStateProvider.GetAuthenticationStateAsync()).User;
            var userIdClaim = userClaim.FindFirst(ClaimTypes.NameIdentifier);
            int.TryParse(userIdClaim!.Value, out userID);
            var user = await UserService.GetUserByID(userID);
            recipes = new List<RecipeDTO>();
            foreach (var id in user.SavedRecipeIds)
            {
                var recipe = await RecipeService.GetRecipe(id);
                recipes.Add(recipe);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Oh, it failed!" + e.Message);
        }
    }

    public void HandleCreateRecipe()
    {
        NavigationManager.NavigateTo("recipes/create");
    }
}