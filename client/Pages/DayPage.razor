@page "/day/{dateString}"
@attribute [Authorize]
@using System.Globalization
@using System.Security.Claims
@using System.Text.Json
@using Microsoft.JSInterop
@inject AuthenticationStateProvider AuthStateProvider
@inject IMealService MealService
@inject IFoodItemService FoodItemService
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<!-- DayPage.razor -->

<div class="d-inline-flex align-items-center mb-3">
    <button type="button" class="btn btn-primary" @onclick="() => GoToWeek(date)">
        <i class="oi oi-arrow-thick-left mr-2"></i>
        Week @CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(date, CalendarWeekRule.FirstDay, DayOfWeek.Monday)
    </button>
</div>

@if(day == null){
    <p>Loading</p> 
}
else
{
    <div id="topday">
    <h1>@GetDateString()</h1>
    </div>
    <div id="calories">
    <p class="total-calories">Total Calories: @FloatFormat(day.Calories)</p>
    </div>

    
    <div class="meal-box">
        <div class="meal-box-header d-flex justify-content-between">
            <span id="mealtype"> Breakfast</span>
            <span class="calories-heading" id="mealkcal">@FloatFormat(day.Breakfast.Calories) kcal</span>
        </div>

        <div class="ingredient-box-container mt-3">
            @if (day.Breakfast.FoodItems.Any())
            {
                @foreach (var foodItem in day.Breakfast.FoodItems)
                {
                    <div class="ingredient-box d-flex justify-content-between mb-2 rounded">
                        <div>
                            <span class="ingredient-name">@foodItem.FoodItem!.Name</span>
                        </div>
                        <span>
                        <span class="calorie-amount">@FloatFormat(Scale(foodItem.FoodItem.Calories, foodItem.Amount)) kcal</span>
                        <button class="btn btn-outline-danger btn-sm" @onclick="async () => await HandleRemoveFoodItem(day.Breakfast, foodItem)"><i>X</i></button>
                        </span>
                    </div>
                }
            }

            @if (day.Breakfast.Recipes.Any())
            {
                @foreach (var recipe in day.Breakfast.Recipes)
                {
                    
                    <div class="ingredient-box d-flex justify-content-between mb-2 rounded">
                        <a @onclick="() => ViewRecipe(recipe.Recipe.Id, recipe.Amount)">
                            <div id="recipetitle">
                                <span class="ingredient-name">@recipe.Recipe!.Title</span>
                            </div>
                        </a>
                        <span>
                            <span class="calorie-amount">@FloatFormat(recipe.Calories) kcal</span>
    
                            <button class="btn btn-outline-danger btn-sm" @onclick="async () => await HandleRemoveRecipe(day.Breakfast, recipe)"><i>X</i></button>
                        </span>
                    </div>
                    
                }
            }
            <div id="addfood">
            <button class="btn btn-primary mt-2" @onclick="async () => await HandleAddFood(day.Breakfast.Id, MealType.BREAKFAST)">
                <i class="oi oi-plus"></i> Add Food
            </button>
            </div>
        </div>
    </div>



    <div class="meal-box">
        <div class="meal-box-header d-flex justify-content-between">
            <span id="mealtype">Lunch</span>
            <span class="calories-heading" id="mealkcal">@FloatFormat(day.Lunch.Calories) kcal</span>
        </div>

        <div class="ingredient-box-container mt-3">
            @if (day.Lunch.FoodItems.Any())
            {
                @foreach (var foodItem in day.Lunch.FoodItems)
                {
                    <div class="ingredient-box d-flex justify-content-between mb-2 rounded">
                        <div>
                            <span class="ingredient-name">@foodItem.FoodItem!.Name</span>
                        </div>
                        <span>
                        <span class="calorie-amount">@FloatFormat(Scale(foodItem.FoodItem.Calories, foodItem.Amount)) kcal</span>
                        <button class="btn btn-outline-danger btn-sm" @onclick="async () => await HandleRemoveFoodItem(day.Lunch, foodItem)"><i>X</i></button>
                        </span>
                    </div>
                }
            }

            @if (day.Lunch.Recipes.Any())
            {
                @foreach (var recipe in day.Lunch.Recipes)
                {
                    
                    <div class="ingredient-box d-flex justify-content-between mb-2 rounded">
                        <a @onclick="() => ViewRecipe(recipe.Recipe.Id, recipe.Amount)">
                            <div id="recipetitle">
                                <span class="ingredient-name">@recipe.Recipe!.Title</span>
                            </div>
                        </a>
                        <span>
                            <span class="calorie-amount">@FloatFormat(recipe.Calories) kcal</span>
    
                            <button class="btn btn-outline-danger btn-sm" @onclick="async () => await HandleRemoveRecipe(day.Lunch, recipe)"><i>X</i></button>
                        </span>
                    </div>
                    
                }
            }
            <div id="addfood">
            <button class="btn btn-primary mt-2" @onclick="async () => await HandleAddFood(day.Lunch.Id, MealType.LUNCH)">
                <i class="oi oi-plus"></i> Add Food
            </button>
            </div>
        </div>
    </div>


    <div class="meal-box">
        <div class="meal-box-header d-flex justify-content-between">
            <span id="mealtype">Dinner</span>
            <span class="calories-heading" id="mealkcal">@FloatFormat(day.Dinner.Calories) kcal</span>
        </div>

        <div class="ingredient-box-container mt-3">
            @if (day.Dinner.FoodItems.Any())
            {
                @foreach (var foodItem in day.Dinner.FoodItems)
                {
                    <div class="ingredient-box d-flex justify-content-between mb-2 rounded">
                        <div>
                            <span class="ingredient-name">@foodItem.FoodItem!.Name</span>
                        </div>
                        <span>
                        <span class="calorie-amount">@FloatFormat(Scale(foodItem.FoodItem.Calories, foodItem.Amount)) kcal</span>
                        <button class="btn btn-outline-danger btn-sm" @onclick="async () => await HandleRemoveFoodItem(day.Breakfast, foodItem)"><i>X</i></button>
                        </span>
                    </div>
                }
            }

            @if (day.Dinner.Recipes.Any())
            {
                @foreach (var recipe in day.Dinner.Recipes)
                {
                    
                    <div class="ingredient-box d-flex justify-content-between mb-2 rounded">
                        <a @onclick="() => ViewRecipe(recipe.Recipe.Id, recipe.Amount)">
                            <div id="recipetitle">
                                <span class="ingredient-name">@recipe.Recipe!.Title</span>
                            </div>
                        </a>
                        <span>
                            <span class="calorie-amount">@FloatFormat(recipe.Calories) kcal</span>
    
                            <button class="btn btn-outline-danger btn-sm" @onclick="async () => await HandleRemoveRecipe(day.Dinner, recipe)"><i>X</i></button>
                        </span>
                    </div>
                    
                }
            }
            <div id="addfood">
            <button class="btn btn-primary mt-2" @onclick="async () => await HandleAddFood(day.Dinner.Id, MealType.DINNER)">
                <i class="oi oi-plus"></i> Add Food
            </button>
            </div>
        </div>
    </div>


    <div class="meal-box">
        <div class="meal-box-header d-flex justify-content-between">
            <span id="mealtype">Snacks</span>
            <span class="calories-heading" id="mealkcal">@FloatFormat(day.Snacks.Calories) kcal</span>
        </div>

        <div class="ingredient-box-container mt-3">
            @if (day.Snacks.FoodItems.Any())
            {
                @foreach (var foodItem in day.Snacks.FoodItems)
                {
                    <div class="ingredient-box d-flex justify-content-between mb-2 rounded">
                        <div>
                            <span class="ingredient-name">@foodItem.FoodItem!.Name</span>
                        </div>
                        <span>
                        <span class="calorie-amount">@FloatFormat(Scale(foodItem.FoodItem.Calories, foodItem.Amount)) kcal</span>
                        <button class="btn btn-outline-danger btn-sm" @onclick="async () => await HandleRemoveFoodItem(day.Breakfast, foodItem)"><i>X</i></button>
                        </span>
                    </div>
                }
            }

            @if (day.Snacks.Recipes.Any())
            {
                @foreach (var recipe in day.Snacks.Recipes)
                {
                    
                    <div class="ingredient-box d-flex justify-content-between mb-2 rounded">
                        <a @onclick="() => ViewRecipe(recipe.Recipe.Id, recipe.Amount)">
                            <div id="recipetitle">
                                <span class="ingredient-name">@recipe.Recipe!.Title</span>
                            </div>
                        </a>
                        <span>
                            <span class="calorie-amount">@FloatFormat(recipe.Calories) kcal</span>
    
                            <button class="btn btn-outline-danger btn-sm" @onclick="async () => await HandleRemoveRecipe(day.Snacks, recipe)"><i>X</i></button>
                        </span>
                    </div>
                    
                }
            }
            <div id="addfood">
            <button class="btn btn-primary mt-2" @onclick="async () => await HandleAddFood(day.Snacks.Id, MealType.SNACK)">
                <i class="oi oi-plus"></i> Add Food
            </button>
            </div>
        </div>
    </div>
}

<br>


@code {
    // Properties
    [Parameter]
    public string dateString {get; set;} = "today";
    private int userID;
    private DateTime date {get; set;} = DateTime.Now;
    private Day? day {get; set;} = null;

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("clearScrollBtn");
        date = LoadDate(dateString);
        await LoadAddedFood();
        var userClaim = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        var userIdClaim = userClaim.FindFirst(ClaimTypes.NameIdentifier);
        int.TryParse(userIdClaim!.Value, out userID);
        day = await MealService.GetDay(userID, date);
    }

    private string MealTypeToString(MealType type)
    {
        if (type == MealType.BREAKFAST) return "Breakfast";
        if (type == MealType.LUNCH) return "Lunch";
        if (type == MealType.DINNER) return "Dinner";
        if (type == MealType.SNACK) return "Snacks";
        return "Unknown Meal";
    }

    private string GetDateString()
    {
        CultureInfo.CurrentCulture = new CultureInfo("en-US");
        return date.ToLongDateString();
    }

    private float RecipeCalories(RecipeAmountWithFoodItemsDTO recipe)
    {
        float sum = 0.0f;
        foreach(var foodItem in recipe.Fooditems) sum += foodItem.Amount * foodItem.FoodItem!.Calories;
        return sum * recipe.Amount;
    }

    private float Scale(float a, float b) => a * b;

    private async Task HandleAddFood(int? mealID, MealType type)
    {
        if(mealID == null)
        {
            var id = await CreateNewMeal(type);
            if (id == null) return;
            mealID = id;
        }
        string foodItemsSerialized = JsonSerializer.Serialize(mealID);
        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "NN_AddFoodToMeal", foodItemsSerialized);

        NavigationManager.NavigateTo("/search/all");
    }

    private async Task LoadAddedFood()
    {
        string? addFoodToMeal = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "NN_AddFoodToMeal");
        await JSRuntime.InvokeAsync<string>("sessionStorage.removeItem", "NN_AddFoodToMeal");

        if (string.IsNullOrEmpty(addFoodToMeal)) return;
        int mealID = JsonSerializer.Deserialize<int>(addFoodToMeal);

        //Get meal
        var meal = await MealService.GetMealByID(mealID);

        string? foodItemsSerialized = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "NN_Ingredients");
        await JSRuntime.InvokeAsync<string>("sessionStorage.removeItem", "NN_Ingredients");
        string? recipeSerialized = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "NN_Recipe");
        await JSRuntime.InvokeAsync<string>("sessionStorage.removeItem", "NN_Recipe");

        if(!string.IsNullOrEmpty(foodItemsSerialized))
        {
            var loadedFoodItems = JsonSerializer.Deserialize<List<FoodItemAmountDTO>>(foodItemsSerialized);
            if (loadedFoodItems != null)
            {
                meal!.FoodItems.AddRange(loadedFoodItems);
            }
        }

        if (!string.IsNullOrEmpty(recipeSerialized))
        {
            var recipe = JsonSerializer.Deserialize<RecipeAmountDTO>(recipeSerialized);
            if (recipe != null)
            {
                meal!.Recipes.Add(recipe);
            }
        }

        var foodItemMeals = meal!.FoodItems
            .Select(r => new FoodItemMealCreateDTO
                {
                    MealID = meal!.Meal.Id,
                    FoodItemID = r.FoodItem!.Id,
                    Amount = r.Amount
                }
            )
            .ToList();

        var recipeMeals = meal!.Recipes
            .Select(r => new RecipeMealCreateDTO
                {
                    MealID = meal!.Meal.Id,
                    RecipeID = r.Recipe.Id,
                    Amount = r.Amount
                }
            )
            .ToList();

        var mealUpdate = new MealUpdateDTO
        {
            Id = meal!.Meal.Id,
            FoodItemMeals = foodItemMeals,
            RecipeMeals = recipeMeals
        };

        await MealService.UpdateMeal(mealUpdate);
    }

    private async Task<int?> CreateNewMeal(MealType type)
    {
        var meal = await MealService.PostMeal(userID, date, type);
        if (meal != null) return meal.Id;
        else return null;
    }

    private async Task<List<RecipeAmountWithFoodItemsDTO>> GetRecipeWithFoods(int mealID)
    {
        var recipes = await RecipeService.GetByMeal(mealID);
        var recipeWithFoods = new List<RecipeAmountWithFoodItemsDTO>();
        foreach(var recipe in recipes)
        {
            var foodItems = await FoodItemService.GetByRecipe(recipe.Recipe.Id);
            var recipeWithFood = new RecipeAmountWithFoodItemsDTO(recipe.Amount, recipe.Recipe, foodItems);
            recipeWithFoods.Add(recipeWithFood);
        }
        return recipeWithFoods;
    }

    private string FloatFormat(float f) => $"{(f):0.##}";

    private async Task HandleRemoveFoodItem(Meal meal, FoodItemAmountDTO foodItem)
    {
        var foodItemMeals = meal.FoodItems
            .Where(f => f != foodItem)
            .Select(f => new FoodItemMealCreateDTO
                {
                    FoodItemID = f.FoodItem!.Id,
                    MealID = (int) meal.Id!,
                    Amount = f.Amount
                }
            ).ToList();

        var mealUpdate = new MealUpdateDTO
        {
            Id = (int) meal.Id!,
            FoodItemMeals = foodItemMeals
        };
        await MealService.UpdateMeal(mealUpdate);
        day = await MealService.GetDay(userID, date);
        StateHasChanged();
    }

    private async Task HandleRemoveRecipe(Meal meal, RecipeCalories recipe)
    {
        var recipeMeals = meal.Recipes
            .Where(r => r != recipe)
            .Select(r => new RecipeMealCreateDTO
                {
                    RecipeID = r.Recipe.Id,
                    MealID = (int) meal.Id!,
                    Amount = r.Amount
                }
            ).ToList();

        var mealUpdate = new MealUpdateDTO
        {
            Id = (int) meal.Id!,
            RecipeMeals = recipeMeals
        };
        await MealService.UpdateMeal(mealUpdate);
        day = await MealService.GetDay(userID, date);
        StateHasChanged();
    }

/*
    private async Task LoadMeals()
    {
        meals.Clear();
        List<MealDTO> mealDTOs = await MealService.GetMealsByUserIDAndDate(userID, date);
        var mealWithFoods = (await Task.WhenAll(
            mealDTOs.Select(
                async m => new MealWithFood
                (
                    m.Id,
                    m.MealType,
                    await FoodItemService.GetByMeal(m.Id),
                    await GetRecipeWithFoods(m.Id)
                )
            )
        )).ToList();

        var breakfast = mealWithFoods.Where(m => m.MealType == MealType.BREAKFAST).FirstOrDefault();
        if (breakfast != null)
        {
            meals.Add(breakfast);
        }
        else meals.Add(new MealWithFood(null, MealType.BREAKFAST, new List<FoodItemAmountDTO>(), new List<RecipeAmountWithFoodItemsDTO>()));

        //Lunch
        var lunch = mealWithFoods.Where(m => m.MealType == MealType.LUNCH).FirstOrDefault();
        if (lunch != null)
        {
            meals.Add(lunch);
        }
        else meals.Add(new MealWithFood(null, MealType.LUNCH, new List<FoodItemAmountDTO>(), new List<RecipeAmountWithFoodItemsDTO>()));

        //Dinner
        var dinner = mealWithFoods.Where(m => m.MealType == MealType.DINNER).FirstOrDefault();
        if (dinner != null)
        {
            meals.Add(dinner);
        }
        else meals.Add(new MealWithFood(null, MealType.DINNER, new List<FoodItemAmountDTO>(), new List<RecipeAmountWithFoodItemsDTO>()));

        //Snacks
        var snacks = mealWithFoods.Where(m => m.MealType == MealType.SNACK).FirstOrDefault();
        if (snacks != null)
        {
            meals.Add(snacks);
        }
        else meals.Add(new MealWithFood(null, MealType.SNACK, new List<FoodItemAmountDTO>(), new List<RecipeAmountWithFoodItemsDTO>()));
    }
    */

    private void ViewRecipe(int id, float scale)
    {
        NavigationManager.NavigateTo($"viewRecipe/{id}/view/{scale.ToString(CultureInfo.InvariantCulture)}");
    }

    protected async void GoBack(){
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    public void GoToWeek(DateTime date)
    {
        NavigationManager.NavigateTo($"/Week/{ToDateString(date)}");
    }

    private DateTime LoadDate(string date)
    {
        var split = date.Split("-");
        try
        {
            var year = int.Parse(split[2]);
            var day = int.Parse(split[0]);
            var month = int.Parse(split[1]);
            return new DateTime(year, month, day);
        }
        catch (Exception)
        {
            return DateTime.Now;
        }
    }

    private string ToDateString(DateTime date)
    => $"{date.Day}-{date.Month}-{date.Year}";
    
}