@page "/day"
@attribute [Authorize]
@using System.Globalization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject MealService MealService
@inject FoodItemService FoodItemService
@inject RecipeService RecipeService
@inject NavigationManager NavigationManager



<!-- DayPage.razor -->

<h1>@GetDateString()</h1>
<p class="total-calories">Total Calories: @TotalCalories()</p>

@foreach (var meal in meals)
{
    <div class="meal-box">
        <div class="meal-box-header d-flex justify-content-between">
            <span id="mealtype"> @MealTypeToString(meal.MealType)</span>
            <span class="calories-heading" id="mealkcal">@MealCalories(meal) kcal</span>
        </div>

        <div class="ingredient-box-container mt-3">
            @if (meal.FoodItems.Any())
            {
                @foreach (var foodItem in meal.FoodItems)
                {
                    <div class="ingredient-box d-flex justify-content-between align-items-center mb-2 rounded">
                        <div>
                            <span class="ingredient-name">@foodItem.FoodItem!.Name</span>
                            <span class="calorie-amount">kcal</span>
                        </div>
                        <button class="btn btn-danger btn-sm"><i>X</i></button>
                    </div>
                }
            }

            @if (meal.Recipes.Any())
            {
                @foreach (var recipe in meal.Recipes)
                {
                    <div class="ingredient-box d-flex justify-content-between align-items-center mb-2 rounded">
                        <div>
                            <span class="ingredient-name">@recipe.Recipe!.Title</span>
                            <span class="calorie-amount">kcal</span>
                        </div>
                        <button class="btn btn-danger btn-sm"><i>X</i></button>
                    </div>
                }
            }
            <button class="btn btn-success mt-2" @onclick="async () => await HandleAddFood(meal.MealType)">
                Add Food
            </button>
        </div>
    </div>
}

@code {
    // Properties
    private int userID;
    private DateTime date = DateTime.Now;
    private List<MealWithFood> meals { get; set; } = new List<MealWithFood>();

    private record MealWithFood(int? Id, MealType MealType, List<FoodItemAmountDTO> FoodItems, List<RecipeAmountDTO>
    Recipes);

    protected override async Task OnInitializedAsync()
    {
        var userClaim = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        var userIdClaim = userClaim.FindFirst(ClaimTypes.NameIdentifier);
        int.TryParse(userIdClaim!.Value, out userID);
        List<MealDTO> mealDTOs = await MealService.GetMealsByUserIDAndDate(userID, date);
        var mealWithFoods = (await Task.WhenAll(
            mealDTOs.Select(
                async m => new MealWithFood
                (
                    m.Id,
                    m.MealType,
                    await FoodItemService.GetByMeal(m.Id),
                    await RecipeService.GetByMeal(m.Id)
                )
            )
        )).ToList();

        var breakfast = mealWithFoods.Where(m => m.MealType == MealType.BREAKFAST).FirstOrDefault();
        if (breakfast != null)
        {
            meals.Add(breakfast);
        }
        else meals.Add(new MealWithFood(null, MealType.BREAKFAST, new List<FoodItemAmountDTO>(), new List<RecipeAmountDTO>()));

        //Lunch
        var lunch = mealWithFoods.Where(m => m.MealType == MealType.LUNCH).FirstOrDefault();
        if (lunch != null)
        {
            meals.Add(lunch);
        }
        else meals.Add(new MealWithFood(null, MealType.LUNCH, new List<FoodItemAmountDTO>(), new List<RecipeAmountDTO>()));

        //Dinner
        var dinner = mealWithFoods.Where(m => m.MealType == MealType.DINNER).FirstOrDefault();
        if (dinner != null)
        {
            meals.Add(dinner);
        }
        else meals.Add(new MealWithFood(null, MealType.DINNER, new List<FoodItemAmountDTO>(), new List<RecipeAmountDTO>()));

        //Snacks
        var snacks = mealWithFoods.Where(m => m.MealType == MealType.SNACK).FirstOrDefault();
        if (snacks != null)
        {
            meals.Add(snacks);
        }
        else meals.Add(new MealWithFood(null, MealType.SNACK, new List<FoodItemAmountDTO>(), new List<RecipeAmountDTO>()));
    }

    private string MealTypeToString(MealType type)
    {
        if (type == MealType.BREAKFAST) return "Breakfast";
        if (type == MealType.LUNCH) return "Lunch";
        if (type == MealType.DINNER) return "Dinner";
        if (type == MealType.SNACK) return "Snacks";
        return "Unknown Meal";
    }

    private string GetDateString()
    {
        CultureInfo.CurrentCulture = new CultureInfo("en-US");
        return date.ToLongDateString();
    }


    private float TotalCalories()
    {
        return 2850.0f;
    }

    private float MealCalories(MealWithFood meal)
    {
        return 700.0f;
    }

    private async Task HandleAddFood(MealType type)
    {
        //Save foodItems and Recipes in session
        await Task.Delay(1);
        NavigationManager.NavigateTo("/search");
    }
}