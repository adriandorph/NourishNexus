@page "/Week/{dateString}"
@attribute [Authorize]
@using System.Globalization
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserService UserService
@inject IMealService MealService
@inject IFoodItemService FoodItemService
@inject IPlanningService PlanningService

@if(week == null)
{
    <p>Loading...</p>
}
else
{
    <center>
        <div class="d-flex align-items-center justify-content-center">
            <button class="btn btn-link" @onclick="async () => await PreviousWeek()"><i
                    class="oi oi-arrow-circle-left"></i></button>
            <h4>Week @currentWeek @ToShortDateOnly(startDate) - @ToShortDateOnly(endDate)</h4>
            <button class="btn btn-link" @onclick="async () => await NextWeek()"><i
                    class="oi oi-arrow-circle-right"></i></button>
        </div>
        <div>
            <button class="btn-primary btn-lg shadow" @onclick="HandleGenerateFoodPlan">Generate meal plan</button>
            <div class="@messageCssClass">
                <p>@message</p>
            </div>
            <span class="d-flex justify-content-between mt-3">
                <span>
                    <h5>Daily calorie goal</h5>
                </span>
                <span>
                    <h5>@FloatFormat(DayliCalories()) kcal</h5>
                </span>
            </span>
        </div>
    </center>

    <div class="day-box">
        <div class="d-flex justify-content-between">
            <span id="totalcalories"> Total calories </span>
            <span class="calories-heading" id="daykcal">@FloatFormat(week.Monday.Calories) kcal</span>
        </div>
        <div class="d-flex justify-content-between">
            <span>Breakfast</span>
            @if(week.Monday.Breakfast.Recipes.Count > 0)
            {
                <span>@week.Monday.Breakfast.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Monday.Breakfast.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Lunch</span>
            @if(week.Monday.Lunch.Recipes.Count > 0)
            {
                <span>@week.Monday.Lunch.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Monday.Lunch.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Dinner</span>
            @if(week.Monday.Dinner.Recipes.Count > 0)
            {
                <span>@week.Monday.Dinner.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Monday.Dinner.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Snacks</span>
            @if(week.Monday.Snacks.Recipes.Count > 0)
            {
                <span>@week.Monday.Snacks.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Monday.Snacks.Calories) kcal</span>
            }
        </div>
    </div>

    <div class="my-2">
        <button class="d-flex align-items-center btn-lg btn-primary" @onclick="() => GoToDay(DayOfWeek.Monday)">
            <span style="margin-right: 0.25rem;">Monday</span>
            <i class="oi oi-arrow-thick-right"></i></button>
    </div>

    <div class="day-box">
        <div class="d-flex justify-content-between">
            <span id="totalcalories"> Total calories </span>
            <span class="calories-heading" id="daykcal">@FloatFormat(week.Tuesday.Calories) kcal</span>
        </div>
        <div class="d-flex justify-content-between">
            <span>Breakfast</span>
            @if(week.Tuesday.Breakfast.Recipes.Count > 0)
            {
                <span>@week.Tuesday.Breakfast.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Tuesday.Breakfast.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Lunch</span>
            @if(week.Tuesday.Lunch.Recipes.Count > 0)
            {
                <span>@week.Tuesday.Lunch.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Tuesday.Lunch.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Dinner</span>
            @if(week.Tuesday.Dinner.Recipes.Count > 0)
            {
                <span>@week.Tuesday.Dinner.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Tuesday.Dinner.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Snacks</span>
            @if(week.Tuesday.Snacks.Recipes.Count > 0)
            {
                <span>@week.Tuesday.Snacks.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Tuesday.Snacks.Calories) kcal</span>
            }
        </div>
    </div>

    <div class="my-2">
        <button class="d-flex align-items-center btn-lg btn-primary" @onclick="() => GoToDay(DayOfWeek.Tuesday)">
            <span style="margin-right: 0.25rem;">Tuesday</span>
            <i class="oi oi-arrow-thick-right"></i></button>
    </div>



    <div class="day-box">
        <div class="d-flex justify-content-between">
            <span id="totalcalories"> Total calories </span>
            <span class="calories-heading" id="daykcal">@FloatFormat(week.Wednesday.Calories) kcal</span>
        </div>
        <div class="d-flex justify-content-between">
            <span>Breakfast</span>
            @if(week.Wednesday.Breakfast.Recipes.Count > 0)
            {
                <span>@week.Wednesday.Breakfast.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Wednesday.Breakfast.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Lunch</span>
            @if(week.Wednesday.Lunch.Recipes.Count > 0)
            {
                <span>@week.Wednesday.Lunch.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Wednesday.Lunch.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Dinner</span>
            @if(week.Wednesday.Dinner.Recipes.Count > 0)
            {
                <span>@week.Wednesday.Dinner.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Wednesday.Dinner.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Snacks</span>
            @if(week.Wednesday.Snacks.Recipes.Count > 0)
            {
                <span>@week.Wednesday.Snacks.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Wednesday.Snacks.Calories) kcal</span>
            }
        </div>
    </div>

    <div class="my-2">
        <button class="d-flex align-items-center btn-lg btn-primary" @onclick="() => GoToDay(DayOfWeek.Wednesday)">
            <span style="margin-right: 0.25rem;">Wednesday</span>
            <i class="oi oi-arrow-thick-right"></i></button>
    </div>



    <div class="day-box">
        <div class="d-flex justify-content-between">
            <span id="totalcalories"> Total calories </span>
            <span class="calories-heading" id="daykcal">@FloatFormat(week.Thursday.Calories) kcal</span>
        </div>
        <div class="d-flex justify-content-between">
            <span>Breakfast</span>
            @if(week.Thursday.Breakfast.Recipes.Count > 0)
            {
                <span>@week.Thursday.Breakfast.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Thursday.Breakfast.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Lunch</span>
            @if(week.Thursday.Lunch.Recipes.Count > 0)
            {
                <span>@week.Thursday.Lunch.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Thursday.Lunch.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Dinner</span>
            @if(week.Thursday.Dinner.Recipes.Count > 0)
            {
                <span>@week.Thursday.Dinner.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Thursday.Dinner.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Snacks</span>
            @if(week.Thursday.Snacks.Recipes.Count > 0)
            {
                <span>@week.Thursday.Snacks.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Thursday.Snacks.Calories) kcal</span>
            }
        </div>
    </div>

    <div class="my-2">
        <button class="d-flex align-items-center btn-lg btn-primary" @onclick="() => GoToDay(DayOfWeek.Thursday)">
            <span style="margin-right: 0.25rem;">Thursday</span>
            <i class="oi oi-arrow-thick-right"></i></button>
    </div>


    <div class="day-box">
        <div class="d-flex justify-content-between">
            <span id="totalcalories"> Total calories </span>
            <span class="calories-heading" id="daykcal">@FloatFormat(week.Friday.Calories) kcal</span>
        </div>
        <div class="d-flex justify-content-between">
            <span>Breakfast</span>
            @if(week.Friday.Breakfast.Recipes.Count > 0)
            {
                <span>@week.Friday.Breakfast.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Friday.Breakfast.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Lunch</span>
            @if(week.Friday.Lunch.Recipes.Count > 0)
            {
                <span>@week.Friday.Lunch.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Friday.Lunch.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Dinner</span>
            @if(week.Friday.Dinner.Recipes.Count > 0)
            {
                <span>@week.Friday.Dinner.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Friday.Dinner.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Snacks</span>
            @if(week.Friday.Snacks.Recipes.Count > 0)
            {
                <span>@week.Friday.Snacks.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Friday.Snacks.Calories) kcal</span>
            }
        </div>
    </div>

    <div class="my-2">
        <button class="d-flex align-items-center btn-lg btn-primary" @onclick="() => GoToDay(DayOfWeek.Friday)">
            <span style="margin-right: 0.25rem;">Friday</span>
            <i class="oi oi-arrow-thick-right"></i></button>
    </div>


    <div class="day-box">
        <div class="d-flex justify-content-between">
            <span id="totalcalories"> Total calories </span>
            <span class="calories-heading" id="daykcal">@FloatFormat(week.Saturday.Calories) kcal</span>
        </div>
        <div class="d-flex justify-content-between">
            <span>Breakfast</span>
            @if(week.Saturday.Breakfast.Recipes.Count > 0)
            {
                <span>@week.Saturday.Breakfast.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Saturday.Breakfast.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Lunch</span>
            @if(week.Saturday.Lunch.Recipes.Count > 0)
            {
                <span>@week.Saturday.Lunch.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Saturday.Lunch.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Dinner</span>
            @if(week.Saturday.Dinner.Recipes.Count > 0)
            {
                <span>@week.Saturday.Dinner.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Saturday.Dinner.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Snacks</span>
            @if(week.Saturday.Snacks.Recipes.Count > 0)
            {
                <span>@week.Saturday.Snacks.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Saturday.Snacks.Calories) kcal</span>
            }
        </div>
    </div>

    <div class="my-2">
        <button class="d-flex align-items-center btn-lg btn-primary" @onclick="() => GoToDay(DayOfWeek.Saturday)">
            <span style="margin-right: 0.25rem;">Saturday</span>
            <i class="oi oi-arrow-thick-right"></i>
        </button>
    </div>


    <div class="day-box">
        <div class="d-flex justify-content-between">
            <span id="totalcalories"> Total calories </span>
            <span class="calories-heading" id="daykcal">@FloatFormat(week.Sunday.Calories) kcal</span>
        </div>
        <div class="d-flex justify-content-between">
            <span>Breakfast</span>
            @if(week.Sunday.Breakfast.Recipes.Count > 0)
            {
                <span>@week.Sunday.Breakfast.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Sunday.Breakfast.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Lunch</span>
            @if(week.Sunday.Lunch.Recipes.Count > 0)
            {
                <span>@week.Sunday.Lunch.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Sunday.Lunch.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Dinner</span>
            @if(week.Sunday.Dinner.Recipes.Count > 0)
            {
                <span>@week.Sunday.Dinner.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Sunday.Dinner.Calories) kcal</span>
            }
        </div>
        <div class="d-flex justify-content-between">
            <span>Snacks</span>
            @if(week.Sunday.Snacks.Recipes.Count > 0)
            {
                <span>@week.Sunday.Snacks.Recipes.FirstOrDefault()!.Recipe.Title</span>
            }
            else
            {
                <span>@FloatFormat(week.Sunday.Snacks.Calories) kcal</span>
            }
        </div>
    </div>

    <div class="my-2 mb-4">
        <button class="d-flex align-items-center btn-lg btn-primary" @onclick="() => GoToDay(DayOfWeek.Sunday)">
            <span style="margin-right: 0.25rem;">Sunday</span>
            <i class="oi oi-arrow-thick-right"></i>
        </button>
    </div>
}


@code {
#pragma warning disable CS8618
    [Parameter]
    public string dateString { get; set; } = "today";
    private DateTime date { get; set; } = DateTime.MinValue;
    private DateTime startDate { get; set; }
    private DateTime endDate { get; set; }

    private int userID { get; set; }

    private string message {get; set;}

    private string messageCssClass {get; set;}

    private UserNutritionDTO? user { get; set; }

    private int currentWeek;

    private server.Core.EF.DTO.Week? week {get; set;}

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("clearScrollBtn");
        date = LoadDate(dateString);
        var userClaim = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        var userIdClaim = userClaim.FindFirst(ClaimTypes.NameIdentifier);
        userID = int.Parse(userIdClaim!.Value);
        user = await UserService.GetUserNutritionByID(userID);
        UpdateDates();
        week = await MealService.GetWeek(userID, startDate);
    }
    private async Task PreviousWeek()
    {
        date = date.AddDays(-7);
        UpdateDates();
        week = await MealService.GetWeek(userID, startDate);
    }

    private async Task NextWeek()
    {
        date = date.AddDays(7);
        UpdateDates();
        week = await MealService.GetWeek(userID, startDate);
    }

    private DateTime LoadDate(string date)
    {
        var split = date.Split("-");
        try
        {
            var year = int.Parse(split[2]);
            var day = int.Parse(split[0]);
            var month = int.Parse(split[1]);
            return new DateTime(year, month, day);
        }
        catch (Exception)
        {
            return DateTime.Now;
        }
    }

    private void UpdateDates()
    {
        int diff; //Calculate difference from monday
        if (date.DayOfWeek == DayOfWeek.Sunday) diff = 6;
        else diff = date.DayOfWeek - DayOfWeek.Monday;
        startDate = date.AddDays(-diff); // get Monday date
        endDate = startDate.AddDays(6);
        currentWeek = CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(date, CalendarWeekRule.FirstDay, System.DayOfWeek.Monday);
    }

    private async Task<float> DayKcal(DayOfWeek dayOfWeek)
    {

        DateTime daysDate = GetDay(dayOfWeek);
        var meals = await MealService.GetMealsWithFoodByUserIDAndDate(userID, daysDate);
        float sum = 0.0f;
        foreach (var meal in meals)
        {
            sum += await MealKcal(meal);
        }
        return sum;
    }

    private async Task<float> MealKcal(MealWithFoodDTO meal)
    {
        var sum = 0.0f;

        foreach (var foodItem in meal.FoodItems)
        {
            sum += foodItem.Amount * foodItem.FoodItem!.Calories;
        }
        foreach (var recipe in meal.Recipes)
        {
            foreach (var foodItem in await FoodItemService.GetByRecipe(recipe.Recipe.Id))
            {
                sum += recipe.Amount * foodItem.Amount * foodItem.FoodItem!.Calories;
            }
        }
        return sum;
    }

    private async Task<List<List<MealWithFoodDTO>>> GetDaysWithMeals()
    {
        var days = new List<List<MealWithFoodDTO>>();
        for (int i = 0; i < 7; i++)
        {
            var daysDate = startDate.AddDays(i);
            var meals = await MealService.GetMealsWithFoodByUserIDAndDate(userID, daysDate);
            days.Add(meals);
        }
        return days;
    }

    private string ToShortDateOnly(DateTime date)
    => $"{date.Day}/{date.Month}";

    private string ToDayDateString(DayOfWeek day)
    {
        DateTime date = GetDay(day);
        return ToDateString(date);
    }

    private DateTime GetDay(DayOfWeek day)
    {
        DateTime date;
        if(day == DayOfWeek.Sunday) date = startDate.AddDays(6);
        else date = startDate.AddDays((int)day - 1);
        return date;
    }

    private string ToDateString(DateTime date)
    => $"{date.Day}-{date.Month}-{date.Year}";

    private void GoToDay(DayOfWeek day)
    {
        NavigationManager.NavigateTo($"/day/{ToDayDateString(day)}");
    }

    private string FloatFormat(float f) => $"{(f):0.##}";

    private async Task HandleGenerateFoodPlan()
    {
        message ="Loading...";
        messageCssClass="text-info";
        var response = await PlanningService.GenerateMealPlan(userID, startDate);
        if (response == MealPlanResponse.Success)
        {
            await OnInitializedAsync();
            StateHasChanged();
            message ="Successfully generated a meal plan to suit your nutritional needs";
            messageCssClass="text-success";
        }
        else if (response == MealPlanResponse.Fail)
        {
            await OnInitializedAsync();
            StateHasChanged();
            message = "Could not generate a plan that suits all of your nutritional needs, but here is the next best thing";
            messageCssClass="text-warning";
        }
        else if (response == MealPlanResponse.Cancelled)
        {
            message = "Plan cancelled. You need to have saved at least 7 breakfast recipes, 7 lunch recipes, 7 dinner recipes and 7 snack recipes, to generate a plan.";
            messageCssClass="text-danger";
        }
        else //CancelledTargets
        {
            message = "Plan cancelled. You need to set your nutrition targets on the 'Nutrient Targets' page.";
            messageCssClass="text-danger";
        }
    }

    private float DayliCalories()
    {
        if (user == null) return 0;
        return ((user.BreakfastCalories ?? 0) + (user.LunchCalories ?? 0) + (user.DinnerCalories ?? 0) + (user.SnackCalories ?? 0));
    }
}
