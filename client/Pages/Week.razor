@page "/Week/{dateString}"
@attribute [Authorize]
@using System.Globalization
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject UserService UserService
@inject MealService MealService
@inject FoodItemService FoodItemService

<center>
    <div class="d-flex align-items-center justify-content-center">
        <button class="btn btn-link" @onclick="async () => await PreviousWeek()"><i class="oi oi-arrow-circle-left"></i></button>
        <h4>Week @currentWeek @ToShortDateOnly(startDate) - @ToShortDateOnly(endDate)</h4>
        <button class="btn btn-link" @onclick="async () => await NextWeek()"><i class="oi oi-arrow-circle-right"></i></button>
    </div>
    <div>
        <button class="btn-primary btn-lg">Generate food plan</button>
        <span class="d-flex justify-content-between mt-3">
            <span><h5>Daily calorie goal</h5></span>
            <span><h5>2650 kcal</h5></span>
        </span>
    </div>
</center>

<div class="day-box">
    <div class="d-flex justify-content-between">
        <span id="totalcalories"> Total calories </span>
        <span class="calories-heading" id="daykcal">@FloatFormat(FromDayCalories(0)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Breakfast</span>
        <span>@FloatFormat(FromMealCalories(0,0)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Lunch</span>
        <span>@FloatFormat(FromMealCalories(0,1)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Dinner</span>
        <span>@FloatFormat(FromMealCalories(0,2)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Snacks</span>
        <span>@FloatFormat(FromMealCalories(0,3)) kcal</span>
    </div>
</div>

<div class="my-2">
    <button class="d-flex align-items-center btn-lg btn-primary" @onclick="() => GoToDay(DayOfWeek.Monday)"> 
        <span style="margin-right: 0.25rem;">Monday</span>
        <i class="oi oi-arrow-thick-right"></i></button>
</div>





<div class="day-box">
    <div class="d-flex justify-content-between">
        <span id="totalcalories"> Total calories </span>
        <span class="calories-heading" id="daykcal">@FloatFormat(FromDayCalories(1)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Breakfast</span>
        <span>@FloatFormat(FromMealCalories(1,0)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Lunch</span>
        <span>@FloatFormat(FromMealCalories(1,1)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Dinner</span>
        <span>@FloatFormat(FromMealCalories(1,2)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Snacks</span>
        <span>@FloatFormat(FromMealCalories(1,3)) kcal</span>
    </div>
</div>

<div class="my-2">
    <button class="d-flex align-items-center btn-lg btn-primary" @onclick="() => GoToDay(DayOfWeek.Tuesday)"> 
        <span style="margin-right: 0.25rem;">Tuesday</span>
        <i class="oi oi-arrow-thick-right"></i></button>
</div>




<div class="day-box">
    <div class="d-flex justify-content-between">
        <span id="totalcalories"> Total calories </span>
        <span class="calories-heading" id="daykcal">@FloatFormat(FromDayCalories(2)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Breakfast</span>
        <span>@FloatFormat(FromMealCalories(2,0)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Lunch</span>
        <span>@FloatFormat(FromMealCalories(2,1)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Dinner</span>
        <span>@FloatFormat(FromMealCalories(2,2)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Snacks</span>
        <span>@FloatFormat(FromMealCalories(2,3)) kcal</span>
    </div>
</div>

<div class="my-2">
    <button class="d-flex align-items-center btn-lg btn-primary" @onclick="() => GoToDay(DayOfWeek.Wednesday)"> 
        <span style="margin-right: 0.25rem;">Wednesday</span>
        <i class="oi oi-arrow-thick-right"></i></button>
</div>



<div class="day-box">
    <div class="d-flex justify-content-between">
        <span id="totalcalories"> Total calories </span>
        <span class="calories-heading" id="daykcal">@FloatFormat(FromDayCalories(3)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Breakfast</span>
        <span>@FloatFormat(FromMealCalories(3,0)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Lunch</span>
        <span>@FloatFormat(FromMealCalories(3,1)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Dinner</span>
        <span>@FloatFormat(FromMealCalories(3,2)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Snacks</span>
        <span>@FloatFormat(FromMealCalories(3,3)) kcal</span>
    </div>
</div>

<div class="my-2">
    <button class="d-flex align-items-center btn-lg btn-primary" @onclick="() => GoToDay(DayOfWeek.Thursday)"> 
        <span style="margin-right: 0.25rem;">Thursday</span>
        <i class="oi oi-arrow-thick-right"></i></button>
</div>


<div class="day-box">
    <div class="d-flex justify-content-between">
        <span id="totalcalories"> Total calories </span>
        <span class="calories-heading" id="daykcal">@FloatFormat(FromDayCalories(4)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Breakfast</span>
        <span>@FloatFormat(FromMealCalories(4,0)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Lunch</span>
        <span>@FloatFormat(FromMealCalories(4,1)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Dinner</span>
        <span>@FloatFormat(FromMealCalories(4,2)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Snacks</span>
        <span>@FloatFormat(FromMealCalories(4,3)) kcal</span>
    </div>
</div>

<div class="my-2">
    <button class="d-flex align-items-center btn-lg btn-primary" @onclick="() => GoToDay(DayOfWeek.Friday)"> 
        <span style="margin-right: 0.25rem;">Friday</span>
        <i class="oi oi-arrow-thick-right"></i></button>
</div>


<div class="day-box">
    <div class="d-flex justify-content-between">
        <span id="totalcalories"> Total calories </span>
        <span class="calories-heading" id="daykcal">@FloatFormat(FromDayCalories(5)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Breakfast</span>
        <span>@FloatFormat(FromMealCalories(5,0)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Lunch</span>
        <span>@FloatFormat(FromMealCalories(5,1)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Dinner</span>
        <span>@FloatFormat(FromMealCalories(5,2)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Snacks</span>
        <span>@FloatFormat(FromMealCalories(5,3)) kcal</span>
    </div>
</div>

<div class="my-2">
    <button class="d-flex align-items-center btn-lg btn-primary" @onclick="() => GoToDay(DayOfWeek.Saturday)"> 
        <span style="margin-right: 0.25rem;">Saturday</span>
        <i class="oi oi-arrow-thick-right"></i>
    </button>
</div>


<div class="day-box">
    <div class="d-flex justify-content-between">
        <span id="totalcalories"> Total calories </span>
        <span class="calories-heading" id="daykcal">@FloatFormat(FromDayCalories(6)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Breakfast</span>
        <span>@FloatFormat(FromMealCalories(6,0)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Lunch</span>
        <span>@FloatFormat(FromMealCalories(6,1)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Dinner</span>
        <span>@FloatFormat(FromMealCalories(6,2)) kcal</span>
    </div>
    <div class="d-flex justify-content-between">
        <span>Snacks</span>
        <span>@FloatFormat(FromMealCalories(6,3)) kcal</span>
    </div>
</div>

<div class="my-2">
    <button class="d-flex align-items-center btn-lg btn-primary" @onclick="() => GoToDay(DayOfWeek.Sunday)"> 
        <span style="margin-right: 0.25rem;">Sunday</span>
        <i class="oi oi-arrow-thick-right"></i>
    </button>
</div>


@code {
#pragma warning disable CS8618
    [Parameter]
    public string dateString {get; set;} = "today";
    private DateTime date { get; set; } = DateTime.MinValue;
    private DateTime startDate { get; set; }
    private DateTime endDate { get; set; }

    private int userID { get; set; }

    private UserNutritionDTO user { get; set; }

    private int currentWeek;

    private List<List<MealWithFoodDTO>> days {get; set;} = new List<List<MealWithFoodDTO>>();
    private List<float> dayCalories {get; set;} = new List<float>();
    private List<List<float>> mealCalories {get; set;} = new List<List<float>>();

    //TODO: Only 2 decimals in floats

    protected override async Task OnInitializedAsync()
    {
        date = LoadDate(dateString);
        var userClaim = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        var userIdClaim = userClaim.FindFirst(ClaimTypes.NameIdentifier);
        userID = int.Parse(userIdClaim!.Value);
        user = await UserService.GetUserNutritionByID(userID);
        UpdateDates();
        await UpdateCalories();
    }

    private async Task UpdateCalories()
    {
        days = await GetDaysWithMeals();
        dayCalories = new List<float>();
        dayCalories.Add(await DayKcal(DayOfWeek.Monday));
        dayCalories.Add(await DayKcal(DayOfWeek.Tuesday));
        dayCalories.Add(await DayKcal(DayOfWeek.Wednesday));
        dayCalories.Add(await DayKcal(DayOfWeek.Thursday));
        dayCalories.Add(await DayKcal(DayOfWeek.Friday));
        dayCalories.Add(await DayKcal(DayOfWeek.Saturday));
        dayCalories.Add(await DayKcal(DayOfWeek.Sunday));

        mealCalories = new List<List<float>>();
        foreach(var day in days)
        {
            var meals = new List<float>();
            var breakfast = day.Where(m => m.Meal.MealType == MealType.BREAKFAST).FirstOrDefault();
            if (breakfast != null) meals.Add(await MealKcal(breakfast));
            else meals.Add(0.0f);

            var lunch = day.Where(m => m.Meal.MealType == MealType.LUNCH).FirstOrDefault();
            if (lunch != null) meals.Add(await MealKcal(lunch));
            else meals.Add(0.0f);

            var dinner = day.Where(m => m.Meal.MealType == MealType.DINNER).FirstOrDefault();
            if (dinner != null) meals.Add(await MealKcal(dinner));
            else meals.Add(0.0f);

            var snack = day.Where(m => m.Meal.MealType == MealType.SNACK).FirstOrDefault();
            if (snack != null) meals.Add(await MealKcal(snack));
            else meals.Add(0.0f);

            mealCalories.Add(meals);
            
        }
    }

    private async Task PreviousWeek()
    {
        date = date.AddDays(-7);
        UpdateDates();
        await UpdateCalories();
    }

    private async Task NextWeek()
    {
        date = date.AddDays(7);
        UpdateDates();
        await UpdateCalories();
    }

    private float FromMealCalories(int day, int meal)
    {
        try
        {
            return mealCalories[day][meal];
        }
        catch (Exception)
        {
            return 0.0f;
        }
    }

    private DateTime LoadDate(string date)
    {
        var split = date.Split("-");
        try
        {
            var year = int.Parse(split[2]);
            var day = int.Parse(split[0]);
            var month = int.Parse(split[1]);
            return new DateTime(year, month, day);
        }
        catch (Exception)
        {
            return DateTime.Now;
        }
    }

    private void UpdateDates()
    {
        int diff = date.DayOfWeek - DayOfWeek.Monday; // calculate difference from Monday
        startDate = date.AddDays(-diff); // get Monday date
        endDate = startDate.AddDays(6);
        currentWeek = CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(date, CalendarWeekRule.FirstDay, DayOfWeek.Monday);
    }

    private async Task<float> DayKcal(DayOfWeek dayOfWeek)
    {

        DateTime daysDate =  startDate.AddDays((int)dayOfWeek - 1);
        var meals = await MealService.GetMealsWithFoodByUserIDAndDate(userID, daysDate);
        float sum = 0.0f;
        foreach(var meal in meals)
        {
            sum += await MealKcal(meal);
        }
        return sum;
    }

    private async Task<float> MealKcal(MealWithFoodDTO meal)
    {
        var sum = 0.0f;

        foreach(var foodItem in meal.FoodItems)
        {
            sum += foodItem.Amount * foodItem.FoodItem!.Calories;
        }
        foreach(var recipe in meal.Recipes)
        {
            foreach(var foodItem in await FoodItemService.GetByRecipe(recipe.Recipe.Id))
            {
                sum += recipe.Amount * foodItem.Amount * foodItem.FoodItem!.Calories;
            }
        }
        return sum;
    }

    private async Task<List<List<MealWithFoodDTO>>> GetDaysWithMeals()
    {
        var days = new List<List<MealWithFoodDTO>>();
        for(int i = 0; i < 7; i++)
        {
            var daysDate = startDate.AddDays(i);
            var meals = await MealService.GetMealsWithFoodByUserIDAndDate(userID, daysDate);
            days.Add(meals);
        }
        return days;
    }

    private float FromDayCalories(int day)
    {
        try
        {
            return dayCalories[day];
        }
        catch (Exception)
        {
            return 0.0f;
        }
    }

    private string ToShortDateOnly(DateTime date)
    => $"{date.Day}/{date.Month}";

    private string ToDayDateString(DayOfWeek day)
    {
        var date = startDate.AddDays((int) day - 1);
        return ToDateString(date);
    }

    private string ToDateString(DateTime date)
    => $"{date.Day}-{date.Month}-{date.Year}";

    private void GoToDay(DayOfWeek day)
    {
        NavigationManager.NavigateTo($"/day/{ToDayDateString(day)}");
    }

    private string FloatFormat(float f) => $"{(f):0.##}";
}
